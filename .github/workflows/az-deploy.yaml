name: az-deploy
on:
  workflow_call:
    inputs:
      test_suite:
        type: string
        description: 'Select deployment/test suite to execute'
        required: true
      location:
        type: string
        description: 'Deployment location'
        required: true
      resource_group_name:
        type: string
        description: 'Resource group name'
        required: true
      hub_config:
        type: string
        description: 'Custom hub config to use, if applicable for chosen test suite'
        required: false
        default: ''
      jumpbox_resource_group_name:
        type: string
        description: 'jumpbox resource group name, if applicable for chosen test suite'
        required: false
        default: ''
      jumpbox_name:
        type: string
        description: 'jumpbox name, if applicable for chosen test suite'
        required: false
        default: ''
      deploy:
        type: boolean
        description: 'Deploy resources'
        required: false
        default: true
      cleanup:
        type: boolean
        description: 'Cleanup resources'
        required: false
        default: true
  workflow_dispatch:
    # ensure inputs are same as workflow_call.inputs
    inputs:
      test_suite:
        type: choice
        description: 'Select deployment/test suite to execute'
        required: true
        default: minimal
        options:
        - minimal
        - azfinsim-default
        - azfinsim-linux
        - azfinsim-windows
        - azfinsim-secured-batch
      location:
        type: string
        description: 'Deployment location'
        required: true
      resource_group_name:
        type: string
        description: 'Resource group name'
        required: true
      hub_config:
        type: string
        description: 'Custom hub config to use, if applicable for chosen test suite'
        required: false
        default: ''
      jumpbox_resource_group_name:
        type: string
        description: 'jumpbox resource group name, if applicable for chosen test suite'
        required: false
        default: ''
      jumpbox_name:
        type: string
        description: 'jumpbox name, if applicable for chosen test suite'
        required: false
        default: ''
      deploy:
        type: boolean
        description: 'Deploy resources'
        required: false
        default: true
      cleanup:
        type: boolean
        description: 'Cleanup resources'
        required: false
        default: true
permissions:
  # these are needed for azure login with OIDC
  contents: read
  id-token: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: azure
    outputs:
      SB_DEPLOYMENT_CONFIG: ${{ steps.prepare.outputs.SB_DEPLOYMENT_CONFIG }}
      SB_DEPLOYMENT_ENABLE_CONTAINERS: ${{ steps.prepare.outputs.SB_DEPLOYMENT_ENABLE_CONTAINERS }}
      SB_DEPLOYMENT_ENABLE_PACKAGES: ${{ steps.prepare.outputs.SB_DEPLOYMENT_ENABLE_PACKAGES }}
    steps:
      - name: prepare deployment configuration
        id: prepare
        run: |
          case "${{ inputs.test_suite }}" in

            minimal)
              echo "SB_DEPLOYMENT_CONFIG=DEFAULT" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_CONTAINERS=false" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_PACKAGES=false" >> $GITHUB_OUTPUT
              ;;

            azfinsim-default)
              echo "SB_DEPLOYMENT_CONFIG=DEFAULT" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_CONTAINERS=false" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_PACKAGES=false" >> $GITHUB_OUTPUT
              ;;

            azfinsim-linux)
              echo "SB_DEPLOYMENT_CONFIG=azfinsim-linux" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_CONTAINERS=true" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_PACKAGES=false" >> $GITHUB_OUTPUT
              ;;

            azfinsim-windows)
              echo "SB_DEPLOYMENT_CONFIG=azfinsim-windows" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_CONTAINERS=false" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_PACKAGES=false" >> $GITHUB_OUTPUT
              ;;

            azfinsim-secured-batch)
              echo "SB_DEPLOYMENT_CONFIG=DEFAULT" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_CONTAINERS=true" >> $GITHUB_OUTPUT
              echo "SB_DEPLOYMENT_ENABLE_PACKAGES=false" >> $GITHUB_OUTPUT
              ;;
          esac
      - uses: actions/checkout@v3
        if: inputs.deploy
      - name: replace config
        if: inputs.deploy && steps.prepare.outputs.SB_DEPLOYMENT_CONFIG != 'DEFAULT'
        run: cp $GITHUB_WORKSPACE/examples/${{ steps.prepare.outputs.SB_DEPLOYMENT_CONFIG }}/* $GITHUB_WORKSPACE/config/
      - name: replace hub config
        if: inputs.deploy && inputs.hub_config != ''
        run: |
          echo '${{ inputs.hub_config }}' | base64 -d > $GITHUB_WORKSPACE/config/hub.jsonc
      - uses: azure/login@v1
        if: inputs.deploy
        with:
          client-id: ${{ secrets.AZ_CLIENT_ID }}
          tenant-id: ${{ secrets.AZ_TENANT_ID }}
          subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      - uses: azure/arm-deploy@v1
        if: inputs.deploy
        with:
          scope: subscription
          subscriptionId: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          region: ${{ inputs.location }}
          template: ./infrastructure.bicep
          deploymentName: dpl-${{ inputs.resource_group_name }}-${{ github.run_id }}
          parameters: batchServiceObjectId=${{ secrets.AZ_BATCH_SERVICE_OBJECT_ID }} resourceGroupName=${{ inputs.resource_group_name }} tags="{'github-action':'1', 'github-run-id':'${{ github.run_id }}'}" enableApplicationContainers=${{ steps.prepare.outputs.SB_DEPLOYMENT_ENABLE_CONTAINERS }} enableApplicationPackages=${{ steps.prepare.outputs.SB_DEPLOYMENT_ENABLE_PACKAGES }}
      - name: show outputs
        if: inputs.deploy
        run: |
          az deployment sub show -n dpl-${{ inputs.resource_group_name }}-${{ github.run_id }} --query properties.outputs
  test:
    runs-on: ubuntu-latest
    environment: azure
    needs: deploy
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake
        cmake --version
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.8"
    - name: Install CLI Python package
      run: |
        python3.8 -m pip install --upgrade pip
        python3.8 -m pip install ./cli
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZ_CLIENT_ID }}
        tenant-id: ${{ secrets.AZ_TENANT_ID }}
        subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
    - name: Run tests
      run: |
        [[ '${{ needs.deploy.outputs.SB_DEPLOYMENT_ENABLE_CONTAINERS }}' == 'true' ]] && enable_containers=ON || enable_containers=OFF
        [[ '${{ needs.deploy.outputs.SB_DEPLOYMENT_ENABLE_PACKAGES }}' == 'true' ]] && enable_packages=ON || enable_packages=OFF
        ctest -V                                                                                                  \
          -D SB_SUBSCRIPTION_ID:STRING=${{ secrets.AZ_SUBSCRIPTION_ID }}                                          \
          -D SB_TEST_SUITE:STRING=${{ inputs.test_suite }}                                                        \
          -D SB_RESOURCE_GROUP_NAME:STRING=${{ inputs.resource_group_name }}                                      \
          -D SB_JUMPBOX_RESOURCE_GROUP_NAME:STRING=${{ inputs.jumpbox_resource_group_name }}                      \
          -D SB_JUMPBOX_NAME:STRING=${{ inputs.jumpbox_name }}                                                    \
          -D SB_DEPLOYMENT_CONFIG:STRING=${{ needs.deploy.outputs.SB_DEPLOYMENT_CONFIG }}                         \
          -D SB_DEPLOYMENT_ENABLE_CONTAINERS:BOOL=$enable_containers                                              \
          -D SB_DEPLOYMENT_ENABLE_PACKAGES:BOOL=$enable_packages                                                  \
          -D CTEST_BUILD_NAME:STRING='${{ github.ref_name }}-[${{ inputs.test_suite }}]-${{ inputs.location }}'   \
          -D CTEST_SITE:STRING=github-ci                                                                          \
          -D CTEST_SOURCE_DIRECTORY:PATH=./tests                                                                  \
          -D CTEST_BINARY_DIRECTORY:PATH=./build                                                                  \
          -S ./.github/ci/ctest.cmake
  cleanup:
    runs-on: ubuntu-latest
    environment: azure
    if: always() && inputs.cleanup
    needs: [deploy, test]
    steps:
      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZ_CLIENT_ID }}
          tenant-id: ${{ secrets.AZ_TENANT_ID }}
          subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      - name: cleanup
        run: |
          az group delete --yes --name '${{ inputs.resource_group_name }}'
