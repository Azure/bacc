name: az-deploy
on:
  workflow_call:
    inputs:
      location:
        type: string
        description: 'Deployment location'
        required: true
      prefix:
        type: string
        description: 'Deployment prefix'
        required: true
      suffix_salt:
        type: string
        description: 'Randomizer string for suffix'
        required: false
        default: ''
      enable_application_containers:
        type: boolean
        description: 'Enable application containers'
        required: false
        default: false
      enable_application_packages:
        type: boolean
        description: 'Enable application packages'
        required: false
        default: false
      deploy:
        type: boolean
        description: 'Deploy resources'
        required: false
        default: true
      cleanup:
        type: boolean
        description: 'Cleanup resources'
        required: false
        default: true
      config:
        type: string
        description: 'Name of configuration files to use'
        required: false
        default: 'default'
  workflow_dispatch:
    # ensure inputs are same as workflow_call.inputs
    inputs:
      location:
        type: string
        description: 'Deployment location'
        required: true
      prefix:
        type: string
        description: 'Deployment prefix'
        required: true
      suffix_salt:
        type: string
        description: 'Randomizer string for suffix'
        required: false
        default: ''
      enable_application_containers:
        type: boolean
        description: 'Enable application containers'
        required: false
        default: false
      enable_application_packages:
        type: boolean
        description: 'Enable application packages'
        required: false
        default: false
      deploy:
        type: boolean
        description: 'Deploy resources'
        required: false
        default: true
      cleanup:
        type: boolean
        description: 'Cleanup resources'
        required: false
        default: true
      config:
        type: choice
        description: 'Name of configuration files to use'
        required: false
        default: 'default'
        options:
          - default
          - examples/azfinsim-linux
          - examples/azfinsim-windows
permissions:
  # these are needed for azure login with OIDC
  contents: read
  id-token: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: azure
    outputs:
      AZ_BATCH_ACCOUNT_ENDPOINT: ${{ steps.az_outputs.outputs.AZ_BATCH_ACCOUNT_ENDPOINT }}
      AZ_BATCH_ACCOUNT_GROUP: ${{ steps.az_outputs.outputs.AZ_BATCH_ACCOUNT_GROUP }}
      AZ_BATCH_ACCOUNT_NAME: ${{ steps.az_outputs.outputs.AZ_BATCH_ACCOUNT_NAME }}
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        id: az_login
        with:
          client-id: ${{ secrets.AZ_CLIENT_ID }}
          tenant-id: ${{ secrets.AZ_TENANT_ID }}
          subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      - name: replace config with ${{ inputs.config }}
        if: inputs.config != 'default'
        run: |
          cp $GITHUB_WORKSPACE/${{ inputs.config }}/* $GITHUB_WORKSPACE/config/
      - uses: azure/arm-deploy@v1
        if: inputs.deploy
        with:
          scope: subscription
          subscriptionId: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          region: ${{ inputs.location }}
          template: ./infrastructure.bicep
          deploymentName: dpl-${{ inputs.prefix }}-${{ github.run_id }}
          parameters: batchServiceObjectId=${{ secrets.AZ_BATCH_SERVICE_OBJECT_ID }} prefix=${{ inputs.prefix }} suffixSalt="${{ inputs.suffix_salt }}" tags="{'github-action':'1', 'github-run-id':'${{ github.run_id }}'}" enableApplicationContainers=${{ inputs.enable_application_containers }} enableApplicationPackages=${{ inputs.enable_application_packages }}
      - name: show / save outputs
        id: az_outputs
        run: |
          az deployment sub show -n dpl-${{ inputs.prefix }}-${{ github.run_id }} --query properties.outputs > $GITHUB_WORKSPACE/outputs.json
          cat $GITHUB_WORKSPACE/outputs.json
          echo "AZ_BATCH_ACCOUNT_ENDPOINT=$(jq -r .batchAccountEndpoint.value $GITHUB_WORKSPACE/outputs.json)" >> $GITHUB_OUTPUT
          echo "AZ_BATCH_ACCOUNT_GROUP=$(jq -r .batchAccountResourceGroup.value $GITHUB_WORKSPACE/outputs.json)" >> $GITHUB_OUTPUT
          echo "AZ_BATCH_ACCOUNT_NAME=$(jq -r .batchAccountName.value $GITHUB_WORKSPACE/outputs.json)" >> $GITHUB_OUTPUT
          echo "AZ_BATCH_ACCOUNT_PUBLIC_NETWORK_ACCESS=$(jq -r .batchAccountPublicNetworkAccess.value $GITHUB_WORKSPACE/outputs.json)" >> $GITHUB_OUTPUT
  test:
    # FIXME: need to add ability to test non-default configs as well
    if: inputs.config == 'default'
    uses: ./.github/workflows/az-deploy-test.yaml
    needs: deploy
    with:
      batch_account_endpoint: ${{ needs.deploy.outputs.AZ_BATCH_ACCOUNT_ENDPOINT }}
      batch_account_group: ${{ needs.deploy.outputs.AZ_BATCH_ACCOUNT_GROUP }}
      batch_account_name: ${{ needs.deploy.outputs.AZ_BATCH_ACCOUNT_NAME }}
    secrets: inherit
  cleanup:
    runs-on: ubuntu-latest
    environment: azure
    if: always() && inputs.cleanup
    needs: [deploy, test]
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v1
        id: az_login
        with:
          client-id: ${{ secrets.AZ_CLIENT_ID }}
          tenant-id: ${{ secrets.AZ_TENANT_ID }}
          subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      - name: cleanup
        run: |
          az group list --tag "github-run-id=${{ github.run_id }}" --query "[].name" -o tsv
          az group list --tag "github-run-id=${{ github.run_id }}" --query "[].name" -o tsv | xargs -l az group delete --yes --name
