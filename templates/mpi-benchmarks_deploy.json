{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.21.1.54444",
      "templateHash": "15866230213268344883"
    }
  },
  "parameters": {
    "resourceGroupName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 90,
      "metadata": {
        "description": "resource group name"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "location where all the resources are to be deployed"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "additonal tags to attach to resources created"
      }
    },
    "timestamp": {
      "type": "string",
      "defaultValue": "[utcNow('g')]",
      "metadata": {
        "description": "deployment timestamp"
      }
    },
    "vnetPeerResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "vnet peer resource group name"
      }
    },
    "vnetPeerName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "vnet peer name"
      }
    },
    "batchServiceObjectId": {
      "type": "string",
      "metadata": {
        "description": "Batch Service Object Id (az ad sp show --id \"ddbf3205-c6bd-46ae-8127-60eb93363864\" --query id)"
      }
    }
  },
  "variables": {
    "$fxv#0": {
      "network": {
        "addressPrefix": "10.123.0.0/16",
        "subnets": {
          "private-endpoints": {
            "addressPrefix": "10.123.0.0/24",
            "nsgRules": [
              "AllowAllHTTPSInBound",
              "AllowAllHTTPSOutBound",
              "DenyAllInBound",
              "DenyAllOutBound"
            ]
          },
          "pool": {
            "addressPrefix": "10.123.1.0/24",
            "nsgRules": [
              "AllowAllHTTPSOutBound",
              "AllowAllHTTPOutBound",
              "AllowVnetSSHInBound",
              "AllowVnetSSHOutBound"
            ]
          }
        }
      },
      "storage": {},
      "images": {
        "redhat/rhel/8_4/latest": {
          "imageReference": {
            "offer": "rhel",
            "publisher": "redhat",
            "sku": "8_4",
            "version": "latest"
          },
          "isWindows": false,
          "nodeAgentSkuId": "batch.node.el 8",
          "supportsContainers": false
        }
      },
      "batch": {
        "poolAllocationMode": "UserSubscription",
        "publicNetworkAccess": true,
        "pools": [
          {
            "name": "linux-HBv3",
            "virtualMachine": {
              "size": "Standard_HB120rs_v3",
              "image": "redhat/rhel/8_4/latest",
              "taskSlotsPerNode": 1
            },
            "subnet": "pool",
            "interNodeCommunication": true,
            "startTask": {
              "commands": [
                "curl -O -L https://raw.githubusercontent.com/Azure/bacc/main/examples/mpi-benchmarks/start_task.sh",
                "chmod +x start_task.sh",
                "bash start_task.sh"
              ]
            }
          }
        ]
      }
    },
    "config": "[variables('$fxv#0')]",
    "peerings": "[if(and(not(empty(parameters('vnetPeerResourceGroupName'))), not(empty(parameters('vnetPeerName')))), createArray(createObject('group', parameters('vnetPeerResourceGroupName'), 'name', parameters('vnetPeerName'), 'useGateway', true())), createArray())]",
    "hubConfig": "[if(not(empty(variables('peerings'))), createObject('network', createObject('peerings', variables('peerings'))), createObject())]",
    "dplSuffix": "[uniqueString(deployment().name, parameters('location'), parameters('resourceGroupName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('infrastructure-{0}', variables('dplSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "config": {
            "value": "[variables('config')]"
          },
          "hubConfig": {
            "value": "[variables('hubConfig')]"
          },
          "resourceGroupName": {
            "value": "[parameters('resourceGroupName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableApplicationContainers": {
            "value": false
          },
          "enableApplicationPackages": {
            "value": false
          },
          "timestamp": {
            "value": "[parameters('timestamp')]"
          },
          "batchServiceObjectId": {
            "value": "[parameters('batchServiceObjectId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.21.1.54444",
              "templateHash": "4567936912171805021"
            }
          },
          "parameters": {
            "resourceGroupName": {
              "type": "string",
              "minLength": 1,
              "maxLength": 90,
              "metadata": {
                "description": "resource group name"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "location where all the resources are to be deployed"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "additonal tags to attach to resources created"
              }
            },
            "batchServiceObjectId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Batch Service Object Id (az ad sp show --id \"ddbf3205-c6bd-46ae-8127-60eb93363864\" --query id)"
              }
            },
            "enableApplicationPackages": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "enable application packages for batch account"
              }
            },
            "enableApplicationContainers": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "enable container support for applications"
              }
            },
            "timestamp": {
              "type": "string",
              "defaultValue": "[utcNow('g')]",
              "metadata": {
                "description": "deployment timestamp"
              }
            },
            "config": {
              "type": "secureObject",
              "metadata": {
                "description": "deployment configuration"
              }
            },
            "hubConfig": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "hub configuration"
              }
            }
          },
          "variables": {
            "$fxv#0": {
              "almalinux/almalinux/9-gen1/latest": {
                "imageReference": {
                  "offer": "almalinux",
                  "publisher": "almalinux",
                  "sku": "9-gen1",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.el 9"
              },
              "batch/rendering-centos73/rendering/latest": {
                "imageReference": {
                  "offer": "rendering-centos73",
                  "publisher": "batch",
                  "sku": "rendering",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.centos 7"
              },
              "batch/rendering-windows2016/rendering/latest": {
                "imageReference": {
                  "offer": "rendering-windows2016",
                  "publisher": "batch",
                  "sku": "rendering",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "canonical/0001-com-ubuntu-server-focal/20_04-lts/latest": {
                "imageReference": {
                  "offer": "0001-com-ubuntu-server-focal",
                  "publisher": "canonical",
                  "sku": "20_04-lts",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.ubuntu 20.04"
              },
              "canonical/0001-com-ubuntu-server-focal/20_04-lts-gen2/latest": {
                "imageReference": {
                  "offer": "0001-com-ubuntu-server-focal",
                  "publisher": "canonical",
                  "sku": "20_04-lts-gen2",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.ubuntu 20.04"
              },
              "canonical/0001-com-ubuntu-server-jammy/22_04-lts/latest": {
                "imageReference": {
                  "offer": "0001-com-ubuntu-server-jammy",
                  "publisher": "canonical",
                  "sku": "22_04-lts",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.ubuntu 22.04"
              },
              "canonical/ubuntuserver/18.04-lts/latest": {
                "imageReference": {
                  "offer": "ubuntuserver",
                  "publisher": "canonical",
                  "sku": "18.04-lts",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.ubuntu 18.04"
              },
              "debian/debian-10/10/latest": {
                "imageReference": {
                  "offer": "debian-10",
                  "publisher": "debian",
                  "sku": "10",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.debian 10"
              },
              "microsoft-azure-batch/centos-container/7-9/latest": {
                "imageReference": {
                  "offer": "centos-container",
                  "publisher": "microsoft-azure-batch",
                  "sku": "7-9",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.centos 7"
              },
              "microsoft-azure-batch/centos-container-rdma/7-9/latest": {
                "imageReference": {
                  "offer": "centos-container-rdma",
                  "publisher": "microsoft-azure-batch",
                  "sku": "7-9",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.centos 7"
              },
              "microsoft-azure-batch/ubuntu-server-container/20-04-lts/latest": {
                "imageReference": {
                  "offer": "ubuntu-server-container",
                  "publisher": "microsoft-azure-batch",
                  "sku": "20-04-lts",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.ubuntu 20.04"
              },
              "microsoft-azure-batch/ubuntu-server-container-rdma/20-04-lts/latest": {
                "imageReference": {
                  "offer": "ubuntu-server-container-rdma",
                  "publisher": "microsoft-azure-batch",
                  "sku": "20-04-lts",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.ubuntu 20.04"
              },
              "microsoftcblmariner/cbl-mariner/cbl-mariner-2/latest": {
                "imageReference": {
                  "offer": "cbl-mariner",
                  "publisher": "microsoftcblmariner",
                  "sku": "cbl-mariner-2",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.mariner 2.0"
              },
              "microsoftwindowsserver/windowsserver/2012-datacenter/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2012-datacenter",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2012-datacenter-smalldisk/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2012-datacenter-smalldisk",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2012-r2-datacenter/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2012-r2-datacenter",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2012-r2-datacenter-smalldisk/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2012-r2-datacenter-smalldisk",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2016-datacenter/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2016-datacenter",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2016-datacenter-smalldisk/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2016-datacenter-smalldisk",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2016-datacenter-with-containers/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2016-datacenter-with-containers",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2019-datacenter/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2019-datacenter",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2019-datacenter-core/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2019-datacenter-core",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2019-datacenter-core-smalldisk/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2019-datacenter-core-smalldisk",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2019-datacenter-core-with-containers/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2019-datacenter-core-with-containers",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2019-datacenter-core-with-containers-smalldisk/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2019-datacenter-core-with-containers-smalldisk",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2019-datacenter-smalldisk/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2019-datacenter-smalldisk",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2019-datacenter-with-containers/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2019-datacenter-with-containers",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2019-datacenter-with-containers-smalldisk/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2019-datacenter-with-containers-smalldisk",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2022-datacenter/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2022-datacenter",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2022-datacenter-core/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2022-datacenter-core",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2022-datacenter-core-smalldisk/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2022-datacenter-core-smalldisk",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "microsoftwindowsserver/windowsserver/2022-datacenter-smalldisk/latest": {
                "imageReference": {
                  "offer": "windowsserver",
                  "publisher": "microsoftwindowsserver",
                  "sku": "2022-datacenter-smalldisk",
                  "version": "latest"
                },
                "isWindows": true,
                "nodeAgentSkuId": "batch.node.windows amd64"
              },
              "openlogic/centos/7_9/latest": {
                "imageReference": {
                  "offer": "centos",
                  "publisher": "openlogic",
                  "sku": "7_9",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.centos 7"
              },
              "openlogic/centos/7_9-gen2/latest": {
                "imageReference": {
                  "offer": "centos",
                  "publisher": "openlogic",
                  "sku": "7_9-gen2",
                  "version": "latest"
                },
                "isWindows": false,
                "nodeAgentSkuId": "batch.node.centos 7"
              }
            },
            "dplSuffix": "[uniqueString(deployment().name, parameters('location'), parameters('resourceGroupName'))]",
            "allTags": "[union(parameters('tags'), createObject('last deployed', parameters('timestamp'), 'codebase', 'azure/bacc', 'version', '0.1.0'))]",
            "hubConfigSanitized": "[union(createObject('diagnostics', createObject('logAnalyticsWorkspace', createObject('id', ''), 'appInsights', createObject('appId', '', 'instrumentationKey', '')), 'managedIdentities', createArray(), 'network', createObject('routes', createArray(), 'peerings', createArray(), 'dnsZones', createArray())), parameters('hubConfig'))]",
            "logConfig": "[if(and(contains(variables('hubConfigSanitized').diagnostics, 'logAnalyticsWorkspace'), not(empty(variables('hubConfigSanitized').diagnostics.logAnalyticsWorkspace.id))), createObject('workspaceId', variables('hubConfigSanitized').diagnostics.logAnalyticsWorkspace.id), createObject())]",
            "hasAppInsights": "[and(and(contains(variables('hubConfigSanitized').diagnostics, 'appInsights'), not(empty(variables('hubConfigSanitized').diagnostics.appInsights.appId))), not(empty(variables('hubConfigSanitized').diagnostics.appInsights.instrumentationKey)))]",
            "appInsightsConfig": "[if(variables('hasAppInsights'), createObject('appId', variables('hubConfigSanitized').diagnostics.appInsights.appId, 'instrumentationKey', variables('hubConfigSanitized').diagnostics.appInsights.instrumentationKey), createObject())]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2021-04-01",
              "name": "[parameters('resourceGroupName')]",
              "location": "[parameters('location')]",
              "tags": "[variables('allTags')]",
              "metadata": {
                "description": "all resources group"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('spoke-{0}', variables('dplSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "config": {
                    "value": "[coalesce(tryGet(parameters('config'), 'network'), createObject())]"
                  },
                  "tags": {
                    "value": "[variables('allTags')]"
                  },
                  "logConfig": {
                    "value": "[variables('logConfig')]"
                  },
                  "routes": {
                    "value": "[variables('hubConfigSanitized').network.routes]"
                  },
                  "peerings": {
                    "value": "[variables('hubConfigSanitized').network.peerings]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "17734828939909499155"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "location of all resources"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "tags to assign to all resources created"
                      }
                    },
                    "logConfig": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "diagnostics config"
                      }
                    },
                    "routes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "udrs"
                      }
                    },
                    "peerings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "vnet peerings"
                      }
                    },
                    "config": {
                      "type": "secureObject",
                      "metadata": {
                        "description": "spoke configuration"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": {
                      "logs": [
                        {
                          "categoryGroup": "allLogs",
                          "enabled": true
                        }
                      ],
                      "metrics": [
                        {
                          "category": "AllMetrics",
                          "enabled": true
                        }
                      ]
                    },
                    "diagConfig": "[variables('$fxv#0')]",
                    "dplSuffix": "[uniqueString(deployment().name)]",
                    "subnetItems": "[items(parameters('config').subnets)]",
                    "delegations": "[map(variables('subnetItems'), lambda('item', createObject('key', lambdaVariables('item').key, 'delegations', map(coalesce(tryGet(lambdaVariables('item').value, 'delegations'), createArray()), lambda('sname', createObject('name', lambdaVariables('sname'), 'properties', createObject('serviceName', lambdaVariables('sname'))))))))]",
                    "delegationsConfigs": "[reduce(variables('delegations'), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), createObject(format('{0}', lambdaVariables('next').key), createObject('delegations', lambdaVariables('next').delegations)))))]",
                    "commonSubnetConfig": "[union(createObject('privateEndpointNetworkPolicies', 'Disabled', 'privateLinkServiceNetworkPolicies', 'Disabled'), if(empty(parameters('routes')), createObject(), createObject('routeTable', createObject('id', resourceId('Microsoft.Network/routeTables', 'route-table')))))]",
                    "osnets": "[filter(items(parameters('config').subnets), lambda('item', not(equals(lambdaVariables('item').key, 'private-endpoints'))))]",
                    "snets": "[map(variables('osnets'), lambda('item', createObject('name', lambdaVariables('item').key, 'properties', union(variables('commonSubnetConfig'), createObject('addressPrefix', lambdaVariables('item').value.addressPrefix, 'networkSecurityGroup', createObject('id', resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}', lambdaVariables('item').key)))), variables('delegationsConfigs')[lambdaVariables('item').key]))))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "nsgs",
                        "count": "[length(variables('subnetItems'))]"
                      },
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2022-09-01",
                      "name": "[format('nsg-{0}', variables('subnetItems')[copyIndex()].key)]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "securityRules": "[reference(resourceId('Microsoft.Resources/deployments', format('nsgRules-{0}-{1}', variables('subnetItems')[copyIndex()].key, variables('dplSuffix'))), '2022-09-01').outputs.rules.value]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('nsgRules-{0}-{1}', variables('subnetItems')[copyIndex()].key, variables('dplSuffix')))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('routes')))]",
                      "type": "Microsoft.Network/routeTables",
                      "apiVersion": "2022-07-01",
                      "name": "route-table",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "routes": "[parameters('routes')]"
                      },
                      "metadata": {
                        "description": "next-hop route table, if any"
                      }
                    },
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2022-07-01",
                      "name": "spoke-batch",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": [
                            "[parameters('config').addressPrefix]"
                          ]
                        },
                        "subnets": "[concat(variables('snets'), createArray(createObject('name', 'private-endpoints', 'properties', union(variables('commonSubnetConfig'), createObject('addressPrefix', parameters('config').subnets['private-endpoints'].addressPrefix, 'networkSecurityGroup', createObject('id', resourceId('Microsoft.Network/networkSecurityGroups', 'nsg-private-endpoints')))))))]"
                      },
                      "dependsOn": [
                        "nsgs",
                        "[resourceId('Microsoft.Network/routeTables', 'route-table')]"
                      ],
                      "metadata": {
                        "description": "the virtual network"
                      }
                    },
                    {
                      "copy": {
                        "name": "nsgs_diag",
                        "count": "[length(range(0, length(variables('subnetItems'))))]"
                      },
                      "condition": "[not(empty(parameters('logConfig')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', format('nsg-{0}', variables('subnetItems')[range(0, length(variables('subnetItems')))[copyIndex()]].key))]",
                      "name": "diag",
                      "properties": "[union(parameters('logConfig'), createObject('logs', variables('diagConfig').logs))]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', format('nsg-{0}', variables('subnetItems')[range(0, length(variables('subnetItems')))[copyIndex()]].key))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('logConfig')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', 'spoke-batch')]",
                      "name": "[format('{0}-diag', 'spoke-batch')]",
                      "properties": "[union(parameters('logConfig'), variables('diagConfig'))]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', 'spoke-batch')]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dplNSGRules",
                        "count": "[length(variables('subnetItems'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('nsgRules-{0}-{1}', variables('subnetItems')[copyIndex()].key, variables('dplSuffix'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "ruleNames": {
                            "value": "[coalesce(tryGet(variables('subnetItems')[copyIndex()].value, 'nsgRules'), createArray())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.21.1.54444",
                              "templateHash": "10381560863554466408"
                            }
                          },
                          "parameters": {
                            "ruleNames": {
                              "type": "array"
                            },
                            "priority": {
                              "type": "int",
                              "defaultValue": 100,
                              "metadata": {
                                "description": "priority number to start assigning priorities to rules."
                              }
                            }
                          },
                          "variables": {
                            "$fxv#0": {
                              "AllowVnetSSHInBound": {
                                "description": "Allow SSH/RDP access within vnet for development / mpi",
                                "protocol": "tcp",
                                "sourcePortRange": "*",
                                "destinationPortRange": "22",
                                "sourceAddressPrefix": "VirtualNetwork",
                                "destinationAddressPrefix": "VirtualNetwork",
                                "access": "Allow",
                                "direction": "Inbound"
                              },
                              "AllowVnetSSHOutBound": {
                                "description": "Allow SSH/RDP access within vnet for development / mpi",
                                "protocol": "tcp",
                                "sourcePortRange": "*",
                                "destinationPortRange": "22",
                                "sourceAddressPrefix": "VirtualNetwork",
                                "destinationAddressPrefix": "VirtualNetwork",
                                "access": "Allow",
                                "direction": "Outbound"
                              },
                              "AllowVnetRDPInBound": {
                                "description": "Allow RDP access within vnet for development",
                                "protocol": "tcp",
                                "sourcePortRange": "*",
                                "destinationPortRange": "3389",
                                "sourceAddressPrefix": "VirtualNetwork",
                                "destinationAddressPrefix": "VirtualNetwork",
                                "access": "Allow",
                                "direction": "Inbound"
                              },
                              "AllowVnetNFSv3OutBound": {
                                "description": "Allow NFSv3 outbound traffic",
                                "protocol": "tcp",
                                "sourcePortRange": "*",
                                "destinationPortRanges": [
                                  "111",
                                  "2048-2049"
                                ],
                                "sourceAddressPrefix": "*",
                                "destinationAddressPrefix": "VirtualNetwork",
                                "access": "Allow",
                                "direction": "Outbound"
                              },
                              "AllowVnetNFSv3InBound": {
                                "description": "Allow NFSv3 inbound traffic",
                                "protocol": "tcp",
                                "sourcePortRange": "*",
                                "destinationPortRanges": [
                                  "111",
                                  "2048-2049"
                                ],
                                "sourceAddressPrefix": "VirtualNetwork",
                                "destinationAddressPrefix": "VirtualNetwork",
                                "access": "Allow",
                                "direction": "Inbound"
                              },
                              "AllowVnetAzureFilesOutBound": {
                                "description": "Allow Azure Files outbound traffic",
                                "protocol": "tcp",
                                "sourcePortRange": "*",
                                "destinationPortRange": "445",
                                "sourceAddressPrefix": "*",
                                "destinationAddressPrefix": "VirtualNetwork",
                                "access": "Allow",
                                "direction": "Outbound"
                              },
                              "AllowVnetAzureFilesInBound": {
                                "description": "Allow Azure Files inbound traffic",
                                "protocol": "tcp",
                                "sourcePortRange": "*",
                                "destinationPortRange": "445",
                                "sourceAddressPrefix": "VirtualNetwork",
                                "destinationAddressPrefix": "VirtualNetwork",
                                "access": "Allow",
                                "direction": "Inbound"
                              },
                              "AllowAllHTTPSOutBound": {
                                "description": "Allow HTTPs outbound traffic",
                                "protocol": "tcp",
                                "sourcePortRange": "*",
                                "destinationPortRange": "443",
                                "sourceAddressPrefix": "*",
                                "destinationAddressPrefix": "*",
                                "access": "Allow",
                                "direction": "Outbound"
                              },
                              "AllowAllHTTPOutBound": {
                                "description": "Allow HTTP outbound traffic",
                                "protocol": "tcp",
                                "sourcePortRange": "*",
                                "destinationPortRange": "80",
                                "sourceAddressPrefix": "*",
                                "destinationAddressPrefix": "*",
                                "access": "Allow",
                                "direction": "Outbound"
                              },
                              "AllowAllHTTPSInBound": {
                                "description": "Allow HTTPs inbound traffic",
                                "protocol": "tcp",
                                "sourcePortRange": "*",
                                "destinationPortRange": "443",
                                "sourceAddressPrefix": "*",
                                "destinationAddressPrefix": "*",
                                "access": "Allow",
                                "direction": "Inbound"
                              },
                              "AllowVnetInBound": {
                                "description": "Allow vnet inbound traffic",
                                "protocol": "*",
                                "sourcePortRange": "*",
                                "destinationPortRange": "*",
                                "sourceAddressPrefix": "VirtualNetwork",
                                "destinationAddressPrefix": "VirtualNetwork",
                                "access": "Allow",
                                "direction": "Inbound"
                              },
                              "DenyAllInBound": {
                                "description": "Deny all inbound traffic",
                                "direction": "Inbound",
                                "protocol": "*",
                                "sourcePortRange": "*",
                                "sourceAddressPrefix": "*",
                                "destinationAddressPrefix": "*",
                                "destinationPortRange": "*",
                                "access": "Deny"
                              },
                              "DenyAllOutBound": {
                                "description": "Deny all outbound traffic",
                                "direction": "Outbound",
                                "protocol": "*",
                                "sourcePortRange": "*",
                                "sourceAddressPrefix": "*",
                                "destinationAddressPrefix": "*",
                                "destinationPortRange": "*",
                                "access": "Deny"
                              }
                            },
                            "nsgRules": "[variables('$fxv#0')]",
                            "rules": "[map(parameters('ruleNames'), lambda('ruleName', createObject('name', lambdaVariables('ruleName'), 'properties', variables('nsgRules')[lambdaVariables('ruleName')])))]",
                            "rulesIn0": "[filter(variables('rules'), lambda('rule', equals(toLower(lambdaVariables('rule').properties.direction), 'inbound')))]",
                            "rulesOut0": "[filter(variables('rules'), lambda('rule', equals(toLower(lambdaVariables('rule').properties.direction), 'outbound')))]",
                            "rulesIn": "[map(range(0, length(variables('rulesIn0'))), lambda('index', createObject('name', variables('rulesIn0')[lambdaVariables('index')].name, 'properties', union(createObject('priority', add(lambdaVariables('index'), parameters('priority'))), variables('rulesIn0')[lambdaVariables('index')].properties))))]",
                            "rulesOut": "[map(range(0, length(variables('rulesOut0'))), lambda('index', createObject('name', variables('rulesOut0')[lambdaVariables('index')].name, 'properties', union(createObject('priority', add(lambdaVariables('index'), parameters('priority'))), variables('rulesOut0')[lambdaVariables('index')].properties))))]"
                          },
                          "resources": [],
                          "outputs": {
                            "rules": {
                              "type": "array",
                              "value": "[concat(variables('rulesIn'), variables('rulesOut'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "mdlPeerFwd",
                        "count": "[length(parameters('peerings'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('peering-fwd-{0}-{1}', parameters('peerings')[copyIndex()].name, variables('dplSuffix')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "spoke-batch"
                          },
                          "targetConfig": {
                            "value": "[parameters('peerings')[copyIndex()]]"
                          },
                          "enableGateway": {
                            "value": false
                          },
                          "useRemoteGateway": {
                            "value": "[parameters('peerings')[copyIndex()].useGateway]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.21.1.54444",
                              "templateHash": "27857195044618223"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string"
                            },
                            "targetConfig": {
                              "type": "object"
                            },
                            "enableGateway": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "useRemoteGateway": {
                              "type": "bool"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('vnetName'), format('{0}_{1}', parameters('targetConfig').group, parameters('targetConfig').name))]",
                              "properties": {
                                "allowVirtualNetworkAccess": true,
                                "allowForwardedTraffic": true,
                                "allowGatewayTransit": "[parameters('enableGateway')]",
                                "useRemoteGateways": "[parameters('useRemoteGateway')]",
                                "remoteVirtualNetwork": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('targetConfig').group), 'Microsoft.Network/virtualNetworks', parameters('targetConfig').name)]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', 'spoke-batch')]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "mdlPeerRev",
                        "count": "[length(parameters('peerings'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('peering-rev-{0}-{1}', parameters('peerings')[copyIndex()].name, variables('dplSuffix')), 64)]",
                      "resourceGroup": "[parameters('peerings')[copyIndex()].group]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('peerings')[copyIndex()].name]"
                          },
                          "enableGateway": {
                            "value": "[parameters('peerings')[copyIndex()].useGateway]"
                          },
                          "useRemoteGateway": {
                            "value": false
                          },
                          "targetConfig": {
                            "value": {
                              "name": "spoke-batch",
                              "group": "[resourceGroup().name]"
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.21.1.54444",
                              "templateHash": "27857195044618223"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string"
                            },
                            "targetConfig": {
                              "type": "object"
                            },
                            "enableGateway": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "useRemoteGateway": {
                              "type": "bool"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('vnetName'), format('{0}_{1}', parameters('targetConfig').group, parameters('targetConfig').name))]",
                              "properties": {
                                "allowVirtualNetworkAccess": true,
                                "allowForwardedTraffic": true,
                                "allowGatewayTransit": "[parameters('enableGateway')]",
                                "useRemoteGateways": "[parameters('useRemoteGateway')]",
                                "remoteVirtualNetwork": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('targetConfig').group), 'Microsoft.Network/virtualNetworks', parameters('targetConfig').name)]"
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', 'spoke-batch')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "vnet": {
                      "type": "object",
                      "metadata": {
                        "description": "virtual network"
                      },
                      "value": {
                        "group": "[resourceGroup().name]",
                        "name": "spoke-batch",
                        "id": "[resourceId('Microsoft.Network/virtualNetworks', 'spoke-batch')]"
                      }
                    },
                    "snetPrivateEndpoints": {
                      "type": "object",
                      "metadata": {
                        "description": "subnet to use for all private endpoints"
                      },
                      "value": {
                        "group": "[resourceGroup().name]",
                        "name": "spoke-batch",
                        "snet": "private-endpoints",
                        "snetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', 'spoke-batch', 'private-endpoints')]"
                      }
                    },
                    "gatewayPeeringEnabled": {
                      "type": "bool",
                      "metadata": {
                        "description": "gateway peering deployed"
                      },
                      "value": "[not(empty(parameters('peerings')))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ],
              "metadata": {
                "description": "deploy networking resources"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('storage-{0}', variables('dplSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageJS": {
                    "value": "[parameters('config').storage]"
                  },
                  "tags": {
                    "value": "[variables('allTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "6288222897179725283"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "location of all resources"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "tags to assign to all resources created"
                      }
                    },
                    "storageJS": {
                      "type": "secureObject",
                      "metadata": {
                        "description": "storage configuration"
                      }
                    }
                  },
                  "variables": {
                    "dplSuffix": "[uniqueString(deployment().name)]",
                    "config": "[parameters('storageJS')]",
                    "existingAccounts": "[filter(items(variables('config')), lambda('item', and(contains(lambdaVariables('item').value, 'credentials'), not(empty(lambdaVariables('item').value.credentials)))))]",
                    "newAccounts": "[filter(items(variables('config')), lambda('item', or(not(contains(lambdaVariables('item').value, 'credentials')), empty(lambdaVariables('item').value.credentials))))]",
                    "accountsNew": "[map(variables('newAccounts'), lambda('entity', union(lambdaVariables('entity').value, createObject('name', take(replace(format('{0}{1}', lambdaVariables('entity').key, guid(resourceGroup().id, parameters('location'), lambdaVariables('entity').key)), '-', ''), 24), 'key', lambdaVariables('entity').key))))]",
                    "accountsOld": "[map(variables('existingAccounts'), lambda('entity', union(lambdaVariables('entity').value, createObject('name', lambdaVariables('entity').value.credentials.accountName, 'key', lambdaVariables('entity').key))))]",
                    "accounts": "[union(variables('accountsOld'), variables('accountsNew'))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "mdlStorageAccounts",
                        "count": "[length(variables('accounts'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('storageAccount-{0}-{1}', variables('accounts')[copyIndex()].key, variables('dplSuffix')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "account": {
                            "value": "[variables('accounts')[copyIndex()]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.21.1.54444",
                              "templateHash": "10240081480022150970"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "location of all resources"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "description": "tags to assign to all resources created"
                              }
                            },
                            "account": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "blobEndpoints",
                                "count": "[length(variables('sanitizedAccount').containers)]",
                                "input": {
                                  "name": "[if(variables('useExisting'), '', variables('sanitizedAccount').name)]",
                                  "group": "[resourceGroup().name]",
                                  "privateLinkServiceId": "[if(variables('useExisting'), '', resourceId('Microsoft.Storage/storageAccounts', variables('sanitizedAccount').name))]",
                                  "groupIds": [
                                    "blob"
                                  ],
                                  "privateDnsZoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]"
                                }
                              },
                              {
                                "name": "fileEndpoints",
                                "count": "[length(variables('sanitizedAccount').shares)]",
                                "input": {
                                  "name": "[if(variables('useExisting'), '', variables('sanitizedAccount').name)]",
                                  "group": "[resourceGroup().name]",
                                  "privateLinkServiceId": "[if(variables('useExisting'), '', resourceId('Microsoft.Storage/storageAccounts', variables('sanitizedAccount').name))]",
                                  "groupIds": [
                                    "file"
                                  ],
                                  "privateDnsZoneName": "[format('privatelink.file.{0}', environment().suffixes.storage)]"
                                }
                              }
                            ],
                            "sanitizedAccount": "[union(createObject('containers', createArray(), 'shares', createArray()), parameters('account'))]",
                            "useExisting": "[and(contains(variables('sanitizedAccount'), 'credentials'), not(empty(variables('sanitizedAccount').credentials)))]",
                            "sasCredentials": "[if(and(variables('useExisting'), contains(variables('sanitizedAccount').credentials, 'sasKey')), createObject('sasKey', if(startsWith(variables('sanitizedAccount').credentials.sasKey, '?'), variables('sanitizedAccount').credentials.sasKey, format('?{0}', variables('sanitizedAccount').credentials.sasKey))), createObject())]",
                            "accessKeyCredentials": "[if(and(variables('useExisting'), empty(variables('sasCredentials'))), createObject('accountKey', variables('sanitizedAccount').credentials.accountKey), createObject())]",
                            "enableNFSv3": "[if(contains(variables('sanitizedAccount'), 'enableNFSv3'), variables('sanitizedAccount').enableNFSv3, not(empty(variables('sanitizedAccount').containers)))]",
                            "containerConfigs": "[map(variables('sanitizedAccount').containers, lambda('container', createObject('key', format('{0}/{1}', variables('sanitizedAccount').key, lambdaVariables('container')), 'value', createObject('name', variables('sanitizedAccount').name, 'group', resourceGroup().name, 'kind', 'blob', 'container', lambdaVariables('container'), 'nfsv3', and(variables('enableNFSv3'), not(variables('useExisting'))), 'credentials', union(variables('sasCredentials'), variables('accessKeyCredentials'))))))]"
                          },
                          "resources": [
                            {
                              "condition": "[not(variables('useExisting'))]",
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2022-09-01",
                              "name": "[variables('sanitizedAccount').name]",
                              "location": "[parameters('location')]",
                              "tags": "[union(createObject('config-key', variables('sanitizedAccount').key), parameters('tags'))]",
                              "kind": "StorageV2",
                              "sku": {
                                "name": "Standard_LRS"
                              },
                              "properties": {
                                "accessTier": "Hot",
                                "supportsHttpsTrafficOnly": true,
                                "allowSharedKeyAccess": true,
                                "minimumTlsVersion": "TLS1_2",
                                "isHnsEnabled": "[variables('enableNFSv3')]",
                                "isNfsV3Enabled": "[variables('enableNFSv3')]",
                                "allowBlobPublicAccess": false,
                                "publicNetworkAccess": "Disabled",
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "defaultAction": "Deny",
                                  "ipRules": [],
                                  "virtualNetworkRules": []
                                }
                              }
                            },
                            {
                              "copy": {
                                "name": "containers",
                                "count": "[length(variables('sanitizedAccount').containers)]"
                              },
                              "condition": "[and(not(variables('useExisting')), not(variables('useExisting')))]",
                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}/{2}', variables('sanitizedAccount').name, 'default', variables('sanitizedAccount').containers[copyIndex()])]",
                              "properties": {
                                "publicAccess": "None"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', variables('sanitizedAccount').name)]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "shares",
                                "count": "[length(variables('sanitizedAccount').shares)]"
                              },
                              "condition": "[and(not(variables('useExisting')), not(variables('useExisting')))]",
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}/{2}', variables('sanitizedAccount').name, 'default', variables('sanitizedAccount').shares[copyIndex()])]",
                              "properties": {
                                "enabledProtocols": "SMB"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', variables('sanitizedAccount').name)]"
                              ]
                            }
                          ],
                          "outputs": {
                            "configs": {
                              "type": "object",
                              "value": "[toObject(union(variables('containerConfigs'), map(variables('sanitizedAccount').shares, lambda('share', createObject('key', format('{0}/{1}', variables('sanitizedAccount').key, lambdaVariables('share')), 'value', createObject('name', variables('sanitizedAccount').name, 'group', resourceGroup().name, 'kind', 'file', 'share', lambdaVariables('share'), 'accountKey', if(variables('useExisting'), variables('accessKeyCredentials').accountKey, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('sanitizedAccount').name), '2022-09-01').keys[0].value)))))), lambda('arg', lambdaVariables('arg').key), lambda('arg', lambdaVariables('arg').value))]"
                            },
                            "endpoints": {
                              "type": "array",
                              "value": "[if(variables('useExisting'), createArray(), union(variables('blobEndpoints'), variables('fileEndpoints')))]"
                            }
                          }
                        }
                      },
                      "metadata": {
                        "description": "deploy storage accounts"
                      }
                    }
                  ],
                  "outputs": {
                    "roleAssignments": {
                      "type": "array",
                      "metadata": {
                        "description": "resources needing role assignments (only done for new storage accounts)"
                      },
                      "copy": {
                        "count": "[length(variables('accountsNew'))]",
                        "input": {
                          "kind": "storage",
                          "name": "[variables('accountsNew')[copyIndex()].name]",
                          "group": "[resourceGroup().name]",
                          "roles": [
                            "Storage Blob Data Contributor"
                          ]
                        }
                      }
                    },
                    "unflattedEndpoints": {
                      "type": "array",
                      "metadata": {
                        "description": "unflatted endpoints"
                      },
                      "copy": {
                        "count": "[length(range(0, length(variables('accounts'))))]",
                        "input": "[reference(resourceId('Microsoft.Resources/deployments', take(format('storageAccount-{0}-{1}', variables('accounts')[range(0, length(variables('accounts')))[copyIndex()]].key, variables('dplSuffix')), 64)), '2022-09-01').outputs.endpoints.value]"
                      }
                    },
                    "unlattedConfigs": {
                      "type": "array",
                      "copy": {
                        "count": "[length(range(0, length(variables('accounts'))))]",
                        "input": "[reference(resourceId('Microsoft.Resources/deployments', take(format('storageAccount-{0}-{1}', variables('accounts')[range(0, length(variables('accounts')))[copyIndex()]].key, variables('dplSuffix')), 64)), '2022-09-01').outputs.configs.value]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ],
              "metadata": {
                "description": "deployment for storage accounts"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('batch-{0}', variables('dplSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "batchJS": {
                    "value": "[parameters('config').batch]"
                  },
                  "images": {
                    "value": "[coalesce(tryGet(parameters('config'), 'images'), variables('$fxv#0'))]"
                  },
                  "tags": {
                    "value": "[variables('allTags')]"
                  },
                  "batchServiceObjectId": {
                    "value": "[parameters('batchServiceObjectId')]"
                  },
                  "enableApplicationPackages": {
                    "value": "[parameters('enableApplicationPackages')]"
                  },
                  "enableApplicationContainers": {
                    "value": "[parameters('enableApplicationContainers')]"
                  },
                  "vnet": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('spoke-{0}', variables('dplSuffix'))), '2022-09-01').outputs.vnet.value]"
                  },
                  "logConfig": {
                    "value": "[variables('logConfig')]"
                  },
                  "appInsightsConfig": {
                    "value": "[variables('appInsightsConfig')]"
                  },
                  "storageConfigurations": {
                    "value": "[reduce(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-{0}', variables('dplSuffix'))), '2022-09-01').outputs.unlattedConfigs.value, createObject(), lambda('acc', 'x', union(lambdaVariables('acc'), lambdaVariables('x'))))]"
                  },
                  "gatewayPeeringEnabled": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('spoke-{0}', variables('dplSuffix'))), '2022-09-01').outputs.gatewayPeeringEnabled.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "5081933944424714053"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "location of all resources"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "tags to assign to all resources created"
                      }
                    },
                    "batchServiceObjectId": {
                      "type": "string",
                      "metadata": {
                        "description": "Batch Service Object Id (az ad sp show --id \"ddbf3205-c6bd-46ae-8127-60eb93363864\" --query id)"
                      }
                    },
                    "enableApplicationContainers": {
                      "type": "bool",
                      "metadata": {
                        "description": "enable container support"
                      }
                    },
                    "enableApplicationPackages": {
                      "type": "bool",
                      "metadata": {
                        "description": "enable application packages support"
                      }
                    },
                    "batchJS": {
                      "type": "secureObject",
                      "metadata": {
                        "description": "batch configuration"
                      }
                    },
                    "vnet": {
                      "type": "object",
                      "defaultValue": {
                        "group": "",
                        "name": ""
                      },
                      "metadata": {
                        "group": "vnet group name",
                        "name": "vnet name",
                        "description": "vnet under which pool subsets are defined"
                      }
                    },
                    "logConfig": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "log workspace batchConfig"
                      }
                    },
                    "appInsightsConfig": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "app insights batchConfig"
                      }
                    },
                    "storageConfigurations": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "gatewayPeeringEnabled": {
                      "type": "bool",
                      "metadata": {
                        "description": "spoke deployed with gateway peerings"
                      }
                    },
                    "images": {
                      "type": "object",
                      "metadata": {
                        "description": "VM image definitions"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": {
                      "logs": [
                        {
                          "categoryGroup": "allLogs",
                          "enabled": true
                        }
                      ],
                      "metrics": [
                        {
                          "category": "AllMetrics",
                          "enabled": true
                        }
                      ]
                    },
                    "batchConfig": "[union(createObject('publicNetworkAccess', 'auto', 'poolAllocationMode', 'UserSubscription', 'pools', createArray()), parameters('batchJS'))]",
                    "diagConfig": "[variables('$fxv#0')]",
                    "poolsConfig": "[map(variables('batchConfig').pools, lambda('item', union(createObject('interNodeCommunication', false(), 'mounts', createObject(), 'startTask', createObject('commands', createArray()), 'isWindows', parameters('images')[lambdaVariables('item').virtualMachine.image].isWindows, 'supportsContainers', coalesce(tryGet(parameters('images')[lambdaVariables('item').virtualMachine.image], 'supportsContainers'), not(parameters('images')[lambdaVariables('item').virtualMachine.image].isWindows)), 'containerImages', createArray()), lambdaVariables('item'))))]",
                    "dplSuffix": "[uniqueString(deployment().name)]",
                    "publicNetworkAccess": "[if(equals(variables('batchConfig').publicNetworkAccess, 'auto'), not(parameters('gatewayPeeringEnabled')), variables('batchConfig').publicNetworkAccess)]",
                    "needsKeyVault": "[equals(variables('batchConfig').poolAllocationMode, 'UserSubscription')]",
                    "saRoleAssignments": "[if(parameters('enableApplicationPackages'), createArray(createObject('kind', 'storage', 'name', take(format('sa0{0}', join(split(guid('sa', resourceGroup().id), '-'), '')), 24), 'group', resourceGroup().name, 'roles', createArray('Storage Blob Data Contributor'))), createArray())]",
                    "acrRoleAssignments": "[if(parameters('enableApplicationContainers'), createArray(createObject('kind', 'acr', 'name', take(format('acr{0}', replace(guid('acr', resourceGroup().id), '-', '')), 50), 'group', resourceGroup().name, 'roles', createArray('AcrPull', 'AcrPush', 'AcrDelete', 'AcrImageSigner'))), createArray())]",
                    "baRoleAssignments": [
                      {
                        "kind": "ba",
                        "name": "[take(format('ba{0}', replace(guid('ba', resourceGroup().id), '-', '')), 24)]",
                        "group": "[resourceGroup().name]",
                        "roles": [
                          "Contributor"
                        ]
                      }
                    ],
                    "batchInsightsStartTask": "[if(not(empty(parameters('appInsightsConfig'))), createObject('windows', createObject('commands', createArray('powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString(''https://raw.githubusercontent.com/Azure/batch-insights/master/scripts/run-windows.ps1''))\"'), 'environmentSettings', createArray(createObject('name', 'APP_INSIGHTS_INSTRUMENTATION_KEY', 'value', if(not(empty(parameters('appInsightsConfig'))), parameters('appInsightsConfig').instrumentationKey, '')), createObject('name', 'APP_INSIGHTS_APP_ID', 'value', if(not(empty(parameters('appInsightsConfig'))), parameters('appInsightsConfig').appId, '')), createObject('name', 'BATCH_INSIGHTS_DOWNLOAD_URL', 'value', 'https://github.com/Azure/batch-insights/releases/download/v1.3.0/batch-insights.exe'))), 'linux', createObject('commands', createArray('wget  -O - https://raw.githubusercontent.com/Azure/batch-insights/master/scripts/run-linux.sh | bash'), 'environmentSettings', createArray(createObject('name', 'APP_INSIGHTS_INSTRUMENTATION_KEY', 'value', if(not(empty(parameters('appInsightsConfig'))), parameters('appInsightsConfig').instrumentationKey, '')), createObject('name', 'APP_INSIGHTS_APP_ID', 'value', if(not(empty(parameters('appInsightsConfig'))), parameters('appInsightsConfig').appId, '')), createObject('name', 'BATCH_INSIGHTS_DOWNLOAD_URL', 'value', 'https://github.com/Azure/batch-insights/releases/download/v1.3.0/batch-insights')))), createObject('windows', createObject('commands', createArray(), 'environmentSettings', createArray()), 'linux', createObject('commands', createArray(), 'environmentSettings', createArray())))]",
                    "endpoints": [
                      {
                        "name": "[take(format('ba{0}', replace(guid('ba', resourceGroup().id), '-', '')), 24)]",
                        "group": "[resourceGroup().name]",
                        "privateLinkServiceId": "[resourceId('Microsoft.Batch/batchAccounts', take(format('ba{0}', replace(guid('ba', resourceGroup().id), '-', '')), 24))]",
                        "groupIds": [
                          "batchAccount"
                        ],
                        "privateDnsZoneName": "privatelink.batch.azure.com"
                      },
                      {
                        "name": "[take(format('ba{0}', replace(guid('ba', resourceGroup().id), '-', '')), 24)]",
                        "group": "[resourceGroup().name]",
                        "privateLinkServiceId": "[resourceId('Microsoft.Batch/batchAccounts', take(format('ba{0}', replace(guid('ba', resourceGroup().id), '-', '')), 24))]",
                        "groupIds": [
                          "nodeManagement"
                        ],
                        "privateDnsZoneName": "privatelink.batch.azure.com"
                      },
                      "[if(variables('needsKeyVault'), createObject('name', take(format('kv-{0}', guid('kv', resourceGroup().id)), 24), 'group', resourceGroup().name, 'privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', take(format('kv-{0}', guid('kv', resourceGroup().id)), 24)), 'groupIds', createArray('vault'), 'privateDnsZoneName', 'privatelink.vaultcore.azure.net'), createObject())]",
                      "[if(parameters('enableApplicationContainers'), createObject('name', take(format('acr{0}', replace(guid('acr', resourceGroup().id), '-', '')), 50), 'group', resourceGroup().name, 'privateLinkServiceId', resourceId('Microsoft.ContainerRegistry/registries', take(format('acr{0}', replace(guid('acr', resourceGroup().id), '-', '')), 50)), 'groupIds', createArray('registry'), 'privateDnsZoneName', format('privatelink{0}', environment().suffixes.acrLoginServer)), createObject())]",
                      "[if(parameters('enableApplicationPackages'), createObject('name', take(format('sa0{0}', join(split(guid('sa', resourceGroup().id), '-'), '')), 24), 'group', resourceGroup().name, 'privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', take(format('sa0{0}', join(split(guid('sa', resourceGroup().id), '-'), '')), 24)), 'groupIds', createArray('blob'), 'privateDnsZoneName', format('privatelink.blob.{0}', environment().suffixes.storage)), createObject())]"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2022-01-31-preview",
                      "name": "mi-batch",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "condition": "[variables('needsKeyVault')]",
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[take(format('kv-{0}', guid('kv', resourceGroup().id)), 24)]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "enabledForDeployment": true,
                        "enabledForTemplateDeployment": true,
                        "enabledForDiskEncryption": true,
                        "enableRbacAuthorization": false,
                        "enableSoftDelete": false,
                        "publicNetworkAccess": "disabled",
                        "tenantId": "[tenant().tenantId]",
                        "sku": {
                          "name": "standard",
                          "family": "A"
                        },
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny"
                        },
                        "accessPolicies": [
                          {
                            "objectId": "[parameters('batchServiceObjectId')]",
                            "tenantId": "[tenant().tenantId]",
                            "permissions": {
                              "secrets": [
                                "get",
                                "set",
                                "list",
                                "delete",
                                "recover"
                              ]
                            }
                          }
                        ]
                      },
                      "metadata": {
                        "description": "key vault required to use fo"
                      }
                    },
                    {
                      "condition": "[and(variables('needsKeyVault'), not(empty(parameters('logConfig'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', take(format('kv-{0}', guid('kv', resourceGroup().id)), 24))]",
                      "name": "[format('{0}-diag', take(format('kv-{0}', guid('kv', resourceGroup().id)), 24))]",
                      "properties": "[union(parameters('logConfig'), variables('diagConfig'))]",
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', take(format('kv-{0}', guid('kv', resourceGroup().id)), 24))]"
                      ]
                    },
                    {
                      "condition": "[parameters('enableApplicationPackages')]",
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('sa0{0}', join(split(guid('sa', resourceGroup().id), '-'), '')), 24)]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "Standard_LRS"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "supportsHttpsTrafficOnly": true,
                        "accessTier": "Hot",
                        "publicNetworkAccess": "Disabled",
                        "allowBlobPublicAccess": false,
                        "allowSharedKeyAccess": true,
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "defaultAction": "Deny",
                          "bypass": "AzureServices",
                          "ipRules": null
                        }
                      }
                    },
                    {
                      "condition": "[and(parameters('enableApplicationPackages'), parameters('enableApplicationPackages'))]",
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}/{2}', take(format('sa0{0}', join(split(guid('sa', resourceGroup().id), '-'), '')), 24), 'default', 'container0')]",
                      "properties": {
                        "publicAccess": "None"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', take(format('sa0{0}', join(split(guid('sa', resourceGroup().id), '-'), '')), 24))]"
                      ]
                    },
                    {
                      "condition": "[and(parameters('enableApplicationPackages'), not(empty(parameters('logConfig'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', take(format('sa0{0}', join(split(guid('sa', resourceGroup().id), '-'), '')), 24))]",
                      "name": "[format('{0}-diag', take(format('sa0{0}', join(split(guid('sa', resourceGroup().id), '-'), '')), 24))]",
                      "properties": "[union(parameters('logConfig'), variables('diagConfig'))]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', take(format('sa0{0}', join(split(guid('sa', resourceGroup().id), '-'), '')), 24))]"
                      ],
                      "metadata": {
                        "description": "storage account diagnostics setting"
                      }
                    },
                    {
                      "condition": "[parameters('enableApplicationContainers')]",
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2022-12-01",
                      "name": "[take(format('acr{0}', replace(guid('acr', resourceGroup().id), '-', '')), 50)]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Premium"
                      },
                      "tags": "[union(createObject('sbatch', 'acr'), parameters('tags'))]",
                      "properties": {
                        "adminUserEnabled": "[variables('publicNetworkAccess')]",
                        "publicNetworkAccess": "[if(variables('publicNetworkAccess'), 'Enabled', 'Disabled')]",
                        "zoneRedundancy": "Disabled",
                        "networkRuleBypassOptions": "AzureServices"
                      }
                    },
                    {
                      "condition": "[and(parameters('enableApplicationContainers'), not(empty(parameters('logConfig'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', take(format('acr{0}', replace(guid('acr', resourceGroup().id), '-', '')), 50))]",
                      "name": "[format('{0}-diag', take(format('acr{0}', replace(guid('acr', resourceGroup().id), '-', '')), 50))]",
                      "properties": "[union(parameters('logConfig'), variables('diagConfig'))]",
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', take(format('acr{0}', replace(guid('acr', resourceGroup().id), '-', '')), 50))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Batch/batchAccounts",
                      "apiVersion": "2022-10-01",
                      "name": "[take(format('ba{0}', replace(guid('ba', resourceGroup().id), '-', '')), 24)]",
                      "location": "[parameters('location')]",
                      "tags": "[union(createObject('sbatch', 'batch-account'), parameters('tags'))]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'mi-batch'))]": {}
                        }
                      },
                      "properties": {
                        "allowedAuthenticationModes": "[union(createArray('AAD', 'TaskAuthenticationToken'), if(equals(variables('batchConfig').poolAllocationMode, 'BatchService'), createArray('SharedKey'), createArray()))]",
                        "autoStorage": "[if(parameters('enableApplicationPackages'), createObject('storageAccountId', resourceId('Microsoft.Storage/storageAccounts', take(format('sa0{0}', join(split(guid('sa', resourceGroup().id), '-'), '')), 24)), 'authenticationMode', 'BatchAccountManagedIdentity', 'nodeIdentityReference', createObject('resourceId', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'mi-batch'))), null())]",
                        "poolAllocationMode": "[variables('batchConfig').poolAllocationMode]",
                        "publicNetworkAccess": "[if(variables('publicNetworkAccess'), 'Enabled', 'Disabled')]",
                        "networkProfile": {
                          "accountAccess": {
                            "defaultAction": "Deny",
                            "ipRules": "[if(variables('publicNetworkAccess'), createArray(createObject('action', 'Allow', 'value', '0.0.0.0/0')), createArray())]"
                          },
                          "nodeManagementAccess": {
                            "defaultAction": "Allow"
                          }
                        },
                        "keyVaultReference": "[if(variables('needsKeyVault'), createObject('id', resourceId('Microsoft.KeyVault/vaults', take(format('kv-{0}', guid('kv', resourceGroup().id)), 24)), 'url', reference(resourceId('Microsoft.KeyVault/vaults', take(format('kv-{0}', guid('kv', resourceGroup().id)), 24)), '2022-07-01').vaultUri), null())]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', take(format('kv-{0}', guid('kv', resourceGroup().id)), 24))]",
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'mi-batch')]",
                        "[resourceId('Microsoft.Storage/storageAccounts', take(format('sa0{0}', join(split(guid('sa', resourceGroup().id), '-'), '')), 24))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('logConfig')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Batch/batchAccounts/{0}', take(format('ba{0}', replace(guid('ba', resourceGroup().id), '-', '')), 24))]",
                      "name": "[format('{0}-diag', take(format('ba{0}', replace(guid('ba', resourceGroup().id), '-', '')), 24))]",
                      "properties": "[union(parameters('logConfig'), variables('diagConfig'))]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Batch/batchAccounts', take(format('ba{0}', replace(guid('ba', resourceGroup().id), '-', '')), 24))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "pools",
                        "count": "[length(variables('poolsConfig'))]"
                      },
                      "type": "Microsoft.Batch/batchAccounts/pools",
                      "apiVersion": "2022-10-01",
                      "name": "[format('{0}/{1}', take(format('ba{0}', replace(guid('ba', resourceGroup().id), '-', '')), 24), variables('poolsConfig')[copyIndex()].name)]",
                      "identity": {
                        "type": "UserAssigned",
                        "userAssignedIdentities": {
                          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'mi-batch'))]": {}
                        }
                      },
                      "properties": {
                        "vmSize": "[variables('poolsConfig')[copyIndex()].virtualMachine.size]",
                        "taskSlotsPerNode": "[variables('poolsConfig')[copyIndex()].virtualMachine.taskSlotsPerNode]",
                        "taskSchedulingPolicy": {
                          "nodeFillType": "Spread"
                        },
                        "deploymentConfiguration": {
                          "virtualMachineConfiguration": {
                            "imageReference": "[parameters('images')[variables('poolsConfig')[copyIndex()].virtualMachine.image].imageReference]",
                            "nodeAgentSkuId": "[parameters('images')[variables('poolsConfig')[copyIndex()].virtualMachine.image].nodeAgentSkuId]",
                            "containerConfiguration": "[if(variables('poolsConfig')[copyIndex()].supportsContainers, createObject('type', 'DockerCompatible', 'containerRegistries', if(parameters('enableApplicationContainers'), createArray(createObject('registryServer', reference(resourceId('Microsoft.ContainerRegistry/registries', take(format('acr{0}', replace(guid('acr', resourceGroup().id), '-', '')), 50)), '2022-12-01').loginServer, 'identityReference', createObject('resourceId', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'mi-batch')))), null()), 'containerImageNames', reference(resourceId('Microsoft.Resources/deployments', take(format('containerImages-{0}-{1}', variables('poolsConfig')[copyIndex()].name, variables('dplSuffix')), 64)), '2022-09-01').outputs.containerImageNames.value), null())]"
                          }
                        },
                        "scaleSettings": {
                          "fixedScale": {
                            "targetDedicatedNodes": 0,
                            "targetLowPriorityNodes": 0,
                            "resizeTimeout": "PT15M"
                          }
                        },
                        "targetNodeCommunicationMode": "Simplified",
                        "interNodeCommunication": "[if(variables('poolsConfig')[copyIndex()].interNodeCommunication, 'Enabled', 'Disabled')]",
                        "networkConfiguration": {
                          "subnetId": "[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnet').group), 'Microsoft.Network/virtualNetworks', parameters('vnet').name), variables('poolsConfig')[copyIndex()].subnet)]",
                          "publicIPAddressConfiguration": {
                            "provision": "NoPublicIPAddresses"
                          }
                        },
                        "startTask": "[reference(resourceId('Microsoft.Resources/deployments', take(format('startTasks-{0}-{1}', variables('poolsConfig')[copyIndex()].name, variables('dplSuffix')), 64)), '2022-09-01').outputs.startTask.value]",
                        "mountConfiguration": "[reference(resourceId('Microsoft.Resources/deployments', take(format('mountConfigurations-{0}-{1}', variables('poolsConfig')[copyIndex()].name, variables('dplSuffix')), 64)), '2022-09-01').outputs.mountConfigurations.value]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', take(format('acr{0}', replace(guid('acr', resourceGroup().id), '-', '')), 50))]",
                        "[resourceId('Microsoft.Batch/batchAccounts', take(format('ba{0}', replace(guid('ba', resourceGroup().id), '-', '')), 24))]",
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'mi-batch')]",
                        "[resourceId('Microsoft.Resources/deployments', take(format('containerImages-{0}-{1}', variables('poolsConfig')[copyIndex()].name, variables('dplSuffix')), 64))]",
                        "[resourceId('Microsoft.Resources/deployments', take(format('mountConfigurations-{0}-{1}', variables('poolsConfig')[copyIndex()].name, variables('dplSuffix')), 64))]",
                        "[resourceId('Microsoft.Resources/deployments', take(format('startTasks-{0}-{1}', variables('poolsConfig')[copyIndex()].name, variables('dplSuffix')), 64))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "mdlPoolMounts",
                        "count": "[length(variables('poolsConfig'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('mountConfigurations-{0}-{1}', variables('poolsConfig')[copyIndex()].name, variables('dplSuffix')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "mounts": {
                            "value": "[variables('poolsConfig')[copyIndex()].mounts]"
                          },
                          "storageConfigurations": {
                            "value": "[parameters('storageConfigurations')]"
                          },
                          "isWindows": {
                            "value": "[variables('poolsConfig')[copyIndex()].isWindows]"
                          },
                          "mi": {
                            "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'mi-batch')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.21.1.54444",
                              "templateHash": "16160205847879748183"
                            }
                          },
                          "parameters": {
                            "mounts": {
                              "type": "object"
                            },
                            "storageConfigurations": {
                              "type": "object"
                            },
                            "isWindows": {
                              "type": "bool"
                            },
                            "mi": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "sconfigs": "[map(items(parameters('mounts')), lambda('item', union(parameters('storageConfigurations')[lambdaVariables('item').value], createObject('key', lambdaVariables('item').key))))]",
                            "blobNFSConfigs": "[if(parameters('isWindows'), createArray(), filter(variables('sconfigs'), lambda('c', and(equals(lambdaVariables('c').kind, 'blob'), equals(lambdaVariables('c').nfsv3, true())))))]",
                            "blobBFSConfigs": "[if(parameters('isWindows'), createArray(), filter(variables('sconfigs'), lambda('c', and(equals(lambdaVariables('c').kind, 'blob'), equals(lambdaVariables('c').nfsv3, false())))))]",
                            "fsConfigs": "[filter(variables('sconfigs'), lambda('c', equals(lambdaVariables('c').kind, 'file')))]",
                            "configsNFS": "[map(variables('blobNFSConfigs'), lambda('c', createObject('nfsMountConfiguration', createObject('mountOptions', '-o sec=sys,vers=3,nolock,proto=tcp,rw', 'relativeMountPath', lambdaVariables('c').key, 'source', format('{0}.blob.{1}:/{2}/{3}', lambdaVariables('c').name, environment().suffixes.storage, lambdaVariables('c').name, lambdaVariables('c').container)))))]",
                            "configsBFS": "[map(variables('blobBFSConfigs'), lambda('c', createObject('azureBlobFileSystemConfiguration', union(createObject('accountName', lambdaVariables('c').name, 'containerName', lambdaVariables('c').container, 'blobfuseOptions', '-o attr_timeout=240 -o entry_timeout=240 -o negative_timeout=120 -o allow_other', 'relativeMountPath', lambdaVariables('c').key), if(not(empty(lambdaVariables('c').credentials)), lambdaVariables('c').credentials, createObject('identityReference', createObject('resourceId', parameters('mi'))))))))]",
                            "configsFS": "[map(variables('fsConfigs'), lambda('c', createObject('azureFileShareConfiguration', union(if(parameters('isWindows'), createObject(), createObject('mountOptions', '-o vers=3.0,dir_mode=0777,file_mode=0777,sec=ntlmssp')), createObject('relativeMountPath', lambdaVariables('c').key, 'accountName', lambdaVariables('c').name, 'accountKey', lambdaVariables('c').accountKey, 'azureFileUrl', format('https://{0}.file.{1}/{2}', lambdaVariables('c').name, environment().suffixes.storage, lambdaVariables('c').share))))))]",
                            "configs": "[concat(variables('configsNFS'), variables('configsBFS'), variables('configsFS'))]"
                          },
                          "resources": [],
                          "outputs": {
                            "mountConfigurations": {
                              "type": "array",
                              "value": "[filter(variables('configs'), lambda('c', not(empty(lambdaVariables('c')))))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'mi-batch')]"
                      ],
                      "metadata": {
                        "description": "process pool mount configurations"
                      }
                    },
                    {
                      "copy": {
                        "name": "mdlContainerImages",
                        "count": "[length(variables('poolsConfig'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('containerImages-{0}-{1}', variables('poolsConfig')[copyIndex()].name, variables('dplSuffix')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "images": {
                            "value": "[variables('poolsConfig')[copyIndex()].containerImages]"
                          },
                          "acrLoginServer": "[if(parameters('enableApplicationContainers'), createObject('value', reference(resourceId('Microsoft.ContainerRegistry/registries', take(format('acr{0}', replace(guid('acr', resourceGroup().id), '-', '')), 50)), '2022-12-01').loginServer), createObject('value', '<invalidACRName>'))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.21.1.54444",
                              "templateHash": "1856520036028729413"
                            }
                          },
                          "parameters": {
                            "images": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "acrLoginServer": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "containerImageNames": {
                              "type": "array",
                              "value": "[map(parameters('images'), lambda('item', replace(lambdaVariables('item'), '${acr}', parameters('acrLoginServer'))))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', take(format('acr{0}', replace(guid('acr', resourceGroup().id), '-', '')), 50))]"
                      ],
                      "metadata": {
                        "description": "process pool container images"
                      }
                    },
                    {
                      "copy": {
                        "name": "mdlStartTasks",
                        "count": "[length(variables('poolsConfig'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('startTasks-{0}-{1}', variables('poolsConfig')[copyIndex()].name, variables('dplSuffix')), 64)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "commands": {
                            "value": "[union(variables('batchInsightsStartTask')[if(variables('poolsConfig')[copyIndex()].isWindows, 'windows', 'linux')].commands, variables('poolsConfig')[copyIndex()].startTask.commands)]"
                          },
                          "isWindows": {
                            "value": "[variables('poolsConfig')[copyIndex()].isWindows]"
                          },
                          "environmentSettings": {
                            "value": "[variables('batchInsightsStartTask')[if(variables('poolsConfig')[copyIndex()].isWindows, 'windows', 'linux')].environmentSettings]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.21.1.54444",
                              "templateHash": "16050681291154361719"
                            }
                          },
                          "parameters": {
                            "commands": {
                              "type": "array"
                            },
                            "isWindows": {
                              "type": "bool"
                            },
                            "environmentSettings": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "escapedCommands": "[map(parameters('commands'), lambda('cmd', replace(lambdaVariables('cmd'), '\"', '\\\"')))]",
                            "cmdPrefix": "[if(parameters('isWindows'), 'cmd /c \"', '/bin/sh -c \"')]",
                            "cmdSuffix": "\""
                          },
                          "resources": [],
                          "outputs": {
                            "startTask": {
                              "type": "object",
                              "value": {
                                "commandLine": "[format('{0}{1}{2}', variables('cmdPrefix'), join(variables('escapedCommands'), ' && '), variables('cmdSuffix'))]",
                                "environmentSettings": "[parameters('environmentSettings')]",
                                "maxTaskRetryCount": 0,
                                "userIdentity": {
                                  "autoUser": {
                                    "scope": "pool",
                                    "elevationLevel": "admin"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "endpoints": {
                      "type": "array",
                      "value": "[filter(variables('endpoints'), lambda('arg', not(empty(lambdaVariables('arg')))))]"
                    },
                    "batchAccountEndpoint": {
                      "type": "string",
                      "metadata": {
                        "description": "batch account endpoint"
                      },
                      "value": "[reference(resourceId('Microsoft.Batch/batchAccounts', take(format('ba{0}', replace(guid('ba', resourceGroup().id), '-', '')), 24)), '2022-10-01').accountEndpoint]"
                    },
                    "batchAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "batch account name"
                      },
                      "value": "[take(format('ba{0}', replace(guid('ba', resourceGroup().id), '-', '')), 24)]"
                    },
                    "batchAccountResourceGroup": {
                      "type": "string",
                      "metadata": {
                        "description": "batch account resource group"
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "batchAccountPublicNetworkAccess": {
                      "type": "bool",
                      "metadata": {
                        "description": "batch account public network access"
                      },
                      "value": "[variables('publicNetworkAccess')]"
                    },
                    "roleAssignments": {
                      "type": "array",
                      "metadata": {
                        "description": "resources needing role assignments"
                      },
                      "value": "[union(variables('acrRoleAssignments'), variables('saRoleAssignments'), variables('baRoleAssignments'))]"
                    },
                    "acrName": {
                      "type": "string",
                      "metadata": {
                        "description": "acr name, if deployed"
                      },
                      "value": "[if(parameters('enableApplicationContainers'), take(format('acr{0}', replace(guid('acr', resourceGroup().id), '-', '')), 50), '')]"
                    },
                    "miConfig": {
                      "type": "object",
                      "value": {
                        "name": "mi-batch",
                        "group": "[resourceGroup().name]"
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('spoke-{0}', variables('dplSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-{0}', variables('dplSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ],
              "metadata": {
                "description": "deployment for batch resources"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('endpoints-{0}', variables('dplSuffix'))]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[variables('allTags')]"
                  },
                  "endpoints": {
                    "value": "[union(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('batch-{0}', variables('dplSuffix'))), '2022-09-01').outputs.endpoints.value, flatten(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-{0}', variables('dplSuffix'))), '2022-09-01').outputs.unflattedEndpoints.value))]"
                  },
                  "snetInfo": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('spoke-{0}', variables('dplSuffix'))), '2022-09-01').outputs.snetPrivateEndpoints.value]"
                  },
                  "existingDnsZones": {
                    "value": "[variables('hubConfigSanitized').network.dnsZones]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "17309160143169170406"
                    }
                  },
                  "parameters": {
                    "endpoints": {
                      "type": "array",
                      "metadata": {
                        "description": "array of endpoints to deploy"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "tags"
                      }
                    },
                    "existingDnsZones": {
                      "type": "array",
                      "metadata": {
                        "description": "resource group name for existing dns zones"
                      }
                    },
                    "snetInfo": {
                      "type": "object",
                      "metadata": {
                        "name": "vnet name",
                        "group": "vnet group",
                        "snet": "snet-name",
                        "snetId": "snetId",
                        "description": "subnet info"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "location for all resources"
                      }
                    }
                  },
                  "variables": {
                    "dnsZoneNames": "[union(map(parameters('endpoints'), lambda('item', lambdaVariables('item').privateDnsZoneName)), createArray())]",
                    "dplSuffix": "[uniqueString(deployment().name)]",
                    "existingDnsZonesObject": "[toObject(parameters('existingDnsZones'), lambda('item', lambdaVariables('item').name), lambda('item', lambdaVariables('item').group))]",
                    "newDnsZoneNames": "[filter(variables('dnsZoneNames'), lambda('name', not(contains(variables('existingDnsZonesObject'), lambdaVariables('name')))))]",
                    "newDnsZonesObject": "[toObject(variables('newDnsZoneNames'), lambda('arg', lambdaVariables('arg')), lambda('arg', resourceGroup().name))]",
                    "dnsZonesObject": "[union(variables('existingDnsZonesObject'), variables('newDnsZonesObject'))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "privateDnsZones",
                        "count": "[length(variables('newDnsZoneNames'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[variables('newDnsZoneNames')[copyIndex()]]",
                      "location": "global",
                      "properties": {},
                      "tags": "[parameters('tags')]",
                      "metadata": {
                        "description": "deploy new dns zones, if needed"
                      }
                    },
                    {
                      "copy": {
                        "name": "dplVNetLinks",
                        "count": "[length(items(variables('dnsZonesObject')))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('vnetLinks-{0}-{1}-{2}', items(variables('dnsZonesObject'))[copyIndex()].key, copyIndex(), variables('dplSuffix')), 64)]",
                      "resourceGroup": "[items(variables('dnsZonesObject'))[copyIndex()].value]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "dnsZoneName": {
                            "value": "[items(variables('dnsZonesObject'))[copyIndex()].key]"
                          },
                          "vnetInfo": {
                            "value": "[parameters('snetInfo')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.21.1.54444",
                              "templateHash": "13337401551208951083"
                            }
                          },
                          "parameters": {
                            "dnsZoneName": {
                              "type": "string"
                            },
                            "vnetInfo": {
                              "type": "object",
                              "defaultValue": {
                                "group": null,
                                "name": null
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('dnsZoneName'), format('link-{0}-{1}', parameters('vnetInfo').group, parameters('vnetInfo').name))]",
                              "location": "global",
                              "properties": {
                                "registrationEnabled": false,
                                "virtualNetwork": {
                                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetInfo').group), 'Microsoft.Network/virtualNetworks', parameters('vnetInfo').name)]"
                                }
                              },
                              "tags": "[parameters('tags')]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "privateDnsZones"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dplPrivateEndpoints",
                        "count": "[length(parameters('endpoints'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('privateEndpoint-{0}-{1}', uniqueString(parameters('endpoints')[copyIndex()].name, format('{0}', copyIndex())), variables('dplSuffix')), 64)]",
                      "resourceGroup": "[parameters('endpoints')[copyIndex()].group]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}-{1}-pl', parameters('endpoints')[copyIndex()].name, copyIndex())]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "privateDnsZone": {
                            "value": {
                              "group": "[variables('dnsZonesObject')[parameters('endpoints')[copyIndex()].privateDnsZoneName]]",
                              "name": "[parameters('endpoints')[copyIndex()].privateDnsZoneName]"
                            }
                          },
                          "privateLinkServiceId": {
                            "value": "[parameters('endpoints')[copyIndex()].privateLinkServiceId]"
                          },
                          "groupIds": {
                            "value": "[parameters('endpoints')[copyIndex()].groupIds]"
                          },
                          "subnetId": {
                            "value": "[parameters('snetInfo').snetId]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.21.1.54444",
                              "templateHash": "18230123485547608202"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "name for the endpoint"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "private link service id"
                              }
                            },
                            "groupIds": {
                              "type": "array"
                            },
                            "privateDnsZone": {
                              "type": "object",
                              "defaultValue": {
                                "name": "",
                                "group": ""
                              }
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "the subnet under which to deploy the private endpoints"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2022-05-01",
                              "name": "[parameters('name')]",
                              "tags": "[parameters('tags')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('subnetId')]"
                                },
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": "[parameters('groupIds')]"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'dnsgroup')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "config1",
                                    "properties": {
                                      "privateDnsZoneId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('privateDnsZone').group), 'Microsoft.Network/privateDnsZones', parameters('privateDnsZone').name)]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "privateDnsZones"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('batch-{0}', variables('dplSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('spoke-{0}', variables('dplSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-{0}', variables('dplSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ],
              "metadata": {
                "description": "deploy private endpoints and all related resources"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('roleAssignments-{0}', variables('dplSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "miConfig": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('batch-{0}', variables('dplSuffix'))), '2022-09-01').outputs.miConfig.value]"
                  },
                  "roleAssignments": {
                    "value": "[union(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('batch-{0}', variables('dplSuffix'))), '2022-09-01').outputs.roleAssignments.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-{0}', variables('dplSuffix'))), '2022-09-01').outputs.roleAssignments.value)]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "11474686836054391008"
                    }
                  },
                  "parameters": {
                    "miConfig": {
                      "type": "object"
                    },
                    "roleAssignments": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "dplSuffix": "[uniqueString(deployment().name)]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roles",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('roles-{0}-{1}-{2}', copyIndex(), parameters('roleAssignments')[copyIndex()].name, variables('dplSuffix')), 64)]",
                      "resourceGroup": "[parameters('roleAssignments')[copyIndex()].group]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "kind": {
                            "value": "[parameters('roleAssignments')[copyIndex()].kind]"
                          },
                          "name": {
                            "value": "[parameters('roleAssignments')[copyIndex()].name]"
                          },
                          "roles": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roles]"
                          },
                          "miConfig": {
                            "value": "[parameters('miConfig')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.21.1.54444",
                              "templateHash": "10702426060679684626"
                            }
                          },
                          "parameters": {
                            "kind": {
                              "type": "string",
                              "allowedValues": [
                                "acr",
                                "ba",
                                "storage",
                                "rg"
                              ]
                            },
                            "name": {
                              "type": "string"
                            },
                            "roles": {
                              "type": "array"
                            },
                            "miConfig": {
                              "type": "object",
                              "metadata": {
                                "name": "resource name",
                                "group": "resource group name"
                              }
                            }
                          },
                          "variables": {
                            "$fxv#0": {
                              "APIManagementDeveloperPortalContentEditor": "c031e6a8-4391-4de0-8d69-4706a7ed3729",
                              "APIManagementServiceContributor": "312a565d-c81f-4fd8-895a-4e21e48d571c",
                              "APIManagementServiceOperatorRole": "e022efe7-f5ba-4159-bbe4-b44f577e9b61",
                              "APIManagementServiceReaderRole": "71522526-b88f-4d52-b57f-d31fc3546d0d",
                              "AccessReviewOperatorServiceRole": "76cc9ee4-d5d3-4a45-a930-26add3d73475",
                              "AcrDelete": "c2f4ef07-c644-48eb-af81-4b1b4947fb11",
                              "AcrImageSigner": "6cef56e8-d556-48e5-a04f-b8e64114680f",
                              "AcrPull": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
                              "AcrPush": "8311e382-0749-4cb8-b61a-304f252e45ec",
                              "AcrQuarantineReader": "cdda3590-29a3-44f6-95f2-9f980659eb04",
                              "AcrQuarantineWriter": "c8d4ff99-41c3-41a8-9f60-21dfdad59608",
                              "AgFoodPlatformSensorPartnerContributor": "6b77f0a0-0d89-41cc-acd1-579c22c17a67",
                              "AgFoodPlatformServiceAdmin": "f8da80de-1ff9-4747-ad80-a19b7f6079e3",
                              "AgFoodPlatformServiceContributor": "8508508a-4469-4e45-963b-2518ee0bb728",
                              "AgFoodPlatformServiceReader": "7ec7ccdc-f61e-41fe-9aaf-980df0a44eba",
                              "AnyBuildBuilder": "a2138dac-4907-4679-a376-736901ed8ad8",
                              "AppConfigurationDataOwner": "5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b",
                              "AppConfigurationDataReader": "516239f1-63e1-4d78-a4de-a74fb236a071",
                              "ApplicationGroupContributor": "ca6382a4-1721-4bcf-a114-ff0c70227b6b",
                              "ApplicationInsightsComponentContributor": "ae349356-3a1b-4a5e-921d-050484c6347e",
                              "ApplicationInsightsSnapshotDebugger": "08954f03-6346-4c2e-81c0-ec3a5cfae23b",
                              "AttestationContributor": "bbf86eb8-f7b4-4cce-96e4-18cddf81d86e",
                              "AttestationReader": "fd1bd22b-8476-40bc-a0bc-69b95687b9f3",
                              "AutomationContributor": "f353d9bd-d4a6-484e-a77a-8050b599b867",
                              "AutomationJobOperator": "4fe576fe-1146-4730-92eb-48519fa6bf9f",
                              "AutomationOperator": "d3881f73-407a-4167-8283-e981cbba0404",
                              "AutomationRunbookOperator": "5fb5aef8-1081-4b8e-bb16-9d5d0385bab5",
                              "AutonomousDevelopmentPlatformDataContributor": "b8b15564-4fa6-4a59-ab12-03e1d9594795",
                              "AutonomousDevelopmentPlatformDataOwner": "27f8b550-c507-4db9-86f2-f4b8e816d59d",
                              "AutonomousDevelopmentPlatformDataReader": "d63b75f7-47ea-4f27-92ac-e0d173aaf093",
                              "AvereContributor": "4f8fab4f-1852-4a58-a46a-8eaf358af14a",
                              "AvereOperator": "c025889f-8102-4ebf-b32c-fc0c6f0c6bd9",
                              "AzureArcEnabledKubernetesClusterUserRole": "00493d72-78f6-4148-b6c5-d3ce8e4799dd",
                              "AzureArcKubernetesAdmin": "dffb1e0c-446f-4dde-a09f-99eb5cc68b96",
                              "AzureArcKubernetesClusterAdmin": "8393591c-06b9-48a2-a542-1bd6b377f6a2",
                              "AzureArcKubernetesViewer": "63f0a09d-1495-4db4-a681-037d84835eb4",
                              "AzureArcKubernetesWriter": "5b999177-9696-4545-85c7-50de3797e5a1",
                              "AzureArcScVmmAdministratorRole": "a92dfd61-77f9-4aec-a531-19858b406c87",
                              "AzureArcScVmmPrivateCloudUser": "c0781e91-8102-4553-8951-97c6d4243cda",
                              "AzureArcScVmmPrivateCloudsOnboarding": "6aac74c4-6311-40d2-bbdd-7d01e7c6e3a9",
                              "AzureArcScVmmVMContributor": "e582369a-e17b-42a5-b10c-874c387c530b",
                              "AzureArcVMwareAdministratorRole": "ddc140ed-e463-4246-9145-7c664192013f",
                              "AzureArcVMwarePrivateCloudUser": "ce551c02-7c42-47e0-9deb-e3b6fc3a9a83",
                              "AzureArcVMwarePrivateCloudsOnboarding": "67d33e57-3129-45e6-bb0b-7cc522f762fa",
                              "AzureArcVMwareVMContributor": "b748a06d-6150-4f8a-aaa9-ce3940cd96cb",
                              "AzureConnectedMachineOnboarding": "b64e21ea-ac4e-4cdf-9dc9-5b892992bee7",
                              "AzureConnectedMachineResourceAdministrator": "cd570a14-e51a-42ad-bac8-bafd67325302",
                              "AzureConnectedSQLServerOnboarding": "e8113dce-c529-4d33-91fa-e9b972617508",
                              "AzureDigitalTwinsDataOwner": "bcd981a7-7f74-457b-83e1-cceb9e632ffe",
                              "AzureDigitalTwinsDataReader": "d57506d4-4c8d-48b1-8587-93c323f6a5a3",
                              "AzureEventHubsDataOwner": "f526a384-b230-433a-b45c-95f59c4a2dec",
                              "AzureEventHubsDataReceiver": "a638d3c7-ab3a-418d-83e6-5f17a39d4fde",
                              "AzureEventHubsDataSender": "2b629674-e913-4c01-ae53-ef4638d8f975",
                              "AzureKubernetesFleetManagerContributorRole": "63bb64ad-9799-4770-b5c3-24ed299a07bf",
                              "AzureKubernetesFleetManagerRBACAdmin": "434fb43a-c01c-447e-9f67-c3ad923cfaba",
                              "AzureKubernetesFleetManagerRBACClusterAdmin": "18ab4d3d-a1bf-4477-8ad9-8359bc988f69",
                              "AzureKubernetesFleetManagerRBACReader": "30b27cfc-9c84-438e-b0ce-70e35255df80",
                              "AzureKubernetesFleetManagerRBACWriter": "5af6afb3-c06c-4fa4-8848-71a8aee05683",
                              "AzureKubernetesServiceClusterAdminRole": "0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8",
                              "AzureKubernetesServiceClusterUserRole": "4abbcc35-e782-43d8-92c5-2d3f1bd2253f",
                              "AzureKubernetesServiceContributorRole": "ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8",
                              "AzureKubernetesServicePolicyAddOnDeployment": "18ed5180-3e48-46fd-8541-4ea054d57064",
                              "AzureKubernetesServiceRBACAdmin": "3498e952-d568-435e-9b2c-8d77e338d7f7",
                              "AzureKubernetesServiceRBACClusterAdmin": "b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b",
                              "AzureKubernetesServiceRBACReader": "7f6c6a51-bcf8-42ba-9220-52d62157d7db",
                              "AzureKubernetesServiceRBACWriter": "a7ffa36f-339b-4b5c-8bdf-e2c188b2c0eb",
                              "AzureMLComputeOperator": "e503ece1-11d0-4e8e-8e2c-7a6c3bf38815",
                              "AzureMLDataScientist": "f6c7c914-8db3-469d-8ca1-694a8f32e121",
                              "AzureMLMetricsWriter": "635dd51f-9968-44d3-b7fb-6d9a6bd613ae",
                              "AzureMLRegistryUser": "1823dd4f-9b8c-4ab6-ab4e-7397a3684615",
                              "AzureMapsContributor": "dba33070-676a-4fb0-87fa-064dc56ff7fb",
                              "AzureMapsDataContributor": "8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204",
                              "AzureMapsDataReader": "423170ca-a8f6-4b0f-8487-9e4eb8f49bfa",
                              "AzureMapsSearchAndRenderDataReader": "6be48352-4f82-47c9-ad5e-0acacefdb005",
                              "AzureRelayListener": "26e0b698-aa6d-4085-9386-aadae190014d",
                              "AzureRelayOwner": "2787bf04-f1f5-4bfe-8383-c8a24483ee38",
                              "AzureRelaySender": "26baccc8-eea7-41f1-98f4-1762cc7f685d",
                              "AzureServiceBusDataOwner": "090c5cfd-751d-490a-894a-3ce6f1109419",
                              "AzureServiceBusDataReceiver": "4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
                              "AzureServiceBusDataSender": "69a216fc-b8fb-44d8-bc22-1f3c2cd27a39",
                              "AzureSpringAppsConnectRole": "80558df3-64f9-4c0f-b32d-e5094b036b0b",
                              "AzureSpringAppsRemoteDebuggingRole": "a99b0159-1064-4c22-a57b-c9b3caa1c054",
                              "AzureSpringCloudConfigServerContributor": "a06f5c24-21a7-4e1a-aa2b-f19eb6684f5b",
                              "AzureSpringCloudConfigServerReader": "d04c6db6-4947-4782-9e91-30a88feb7be7",
                              "AzureSpringCloudDataReader": "b5537268-8956-4941-a8f0-646150406f0c",
                              "AzureSpringCloudServiceRegistryContributor": "f5880b48-c26d-48be-b172-7927bfa1c8f1",
                              "AzureSpringCloudServiceRegistryReader": "cff1b556-2399-4e7e-856d-a8f754be7b65",
                              "AzureStackRegistrationOwner": "6f12a6df-dd06-4f3e-bcb1-ce8be600526a",
                              "AzureVMManagedIdentitiesRestoreContributor": "6ae96244-5829-4925-a7d3-5975537d91dd",
                              "BackupContributor": "5e467623-bb1f-42f4-a55d-6e525e11384b",
                              "BackupOperator": "00c29273-979b-4161-815c-10b084fb9324",
                              "BackupReader": "a795c7a0-d4a2-40c1-ae25-d81f01202912",
                              "BillingReader": "fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64",
                              "BizTalkContributor": "5e3c6656-6cfa-4708-81fe-0de47ac73342",
                              "BlockchainMemberNodeAccess": "31a002a1-acaf-453e-8a5b-297c9ca1ea24",
                              "BlueprintContributor": "41077137-e803-4205-871c-5a86e6a753b4",
                              "BlueprintOperator": "437d2ced-4a38-4302-8479-ed2bcb43d090",
                              "CDNEndpointContributor": "426e0c7f-0c7e-4658-b36f-ff54d6c29b45",
                              "CDNEndpointReader": "871e35f6-b5c1-49cc-a043-bde969a0f2cd",
                              "CDNProfileContributor": "ec156ff8-a8d1-4d15-830c-5b80698ca432",
                              "CDNProfileReader": "8f96442b-4075-438f-813d-ad51ab4019af",
                              "ChamberAdmin": "4e9b8407-af2e-495b-ae54-bb60a55b1b5a",
                              "ChamberUser": "4447db05-44ed-4da3-ae60-6cbece780e32",
                              "ClassicNetworkContributor": "b34d265f-36f7-4a0d-a4d4-e158ca92e90f",
                              "ClassicStorageAccountContributor": "86e8f5dc-a6e9-4c67-9d15-de283e8eac25",
                              "ClassicStorageAccountKeyOperatorServiceRole": "985d6b00-f706-48f5-a6fe-d0ca12fb668d",
                              "ClassicVirtualMachineContributor": "d73bb868-a0df-4d4d-bd69-98a00b01fccb",
                              "ClearDBMySQLDBContributor": "9106cda0-8a86-4e81-b686-29a22c54effe",
                              "CodeSigningCertificateProfileSigner": "2837e146-70d7-4cfd-ad55-7efa6464f958",
                              "CodeSigningIdentityVerifier": "4339b7cf-9826-4e41-b4ed-c7f4505dac08",
                              "CognitiveServicesContributor": "25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                              "CognitiveServicesCustomVisionContributor": "c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
                              "CognitiveServicesCustomVisionDeployment": "5c4089e1-6d96-4d2f-b296-c1bc7137275f",
                              "CognitiveServicesCustomVisionLabeler": "88424f51-ebe7-446f-bc41-7fa16989e96c",
                              "CognitiveServicesCustomVisionReader": "93586559-c37d-4a6b-ba08-b9f0940c2d73",
                              "CognitiveServicesCustomVisionTrainer": "0a5ae4ab-0d65-4eeb-be61-29fc9b54394b",
                              "CognitiveServicesDataReader": "b59867f0-fa02-499b-be73-45a86b5b3e1c",
                              "CognitiveServicesFaceRecognizer": "9894cab4-e18a-44aa-828b-cb588cd6f2d7",
                              "CognitiveServicesImmersiveReaderUser": "b2de6794-95db-4659-8781-7e080d3f2b9d",
                              "CognitiveServicesLUISOwner": "f72c8140-2111-481c-87ff-72b910f6e3f8",
                              "CognitiveServicesLUISReader": "18e81cdc-4e98-4e29-a639-e7d10c5a6226",
                              "CognitiveServicesLUISWriter": "6322a993-d5c9-4bed-b113-e49bbea25b27",
                              "CognitiveServicesLanguageOwner": "f07febfe-79bc-46b1-8b37-790e26e6e498",
                              "CognitiveServicesLanguageReader": "7628b7b8-a8b2-4cdc-b46f-e9b35248918e",
                              "CognitiveServicesLanguageWriter": "f2310ca1-dc64-4889-bb49-c8e0fa3d47a8",
                              "CognitiveServicesMetricsAdvisorAdministrator": "cb43c632-a144-4ec5-977c-e80c4affc34a",
                              "CognitiveServicesMetricsAdvisorUser": "3b20f47b-3825-43cb-8114-4bd2201156a8",
                              "CognitiveServicesQnAMakerEditor": "f4cc2bf9-21be-47a1-bdf1-5c5804381025",
                              "CognitiveServicesQnAMakerReader": "466ccd10-b268-4a11-b098-b4849f024126",
                              "CognitiveServicesSpeechContributor": "0e75ca1e-0464-4b4d-8b93-68208a576181",
                              "CognitiveServicesSpeechUser": "f2dc8367-1007-4938-bd23-fe263f013447",
                              "CognitiveServicesUser": "a97b65f3-24c7-4388-baec-2e87135dc908",
                              "CollaborativeDataContributor": "daa9e50b-21df-454c-94a6-a8050adab352",
                              "CollaborativeRuntimeOperator": "7a6f0e70-c033-4fb1-828c-08514e5f4102",
                              "ComputeGallerySharingAdmin": "1ef6a3be-d0ac-425d-8c01-acb62866290b",
                              "Contributor": "b24988ac-6180-42a0-ab88-20f7382dd24c",
                              "CosmosBackupOperator": "db7b14f2-5adf-42da-9f96-f2ee17bab5cb",
                              "CosmosDBAccountReaderRole": "fbdf93bf-df7d-467e-a4d2-9458aa1360c8",
                              "CosmosDBOperator": "230815da-be43-4aae-9cb4-875f7bd000aa",
                              "CosmosRestoreOperator": "5432c526-bc82-444a-b7ba-57c5b0b5b34f",
                              "CostManagementContributor": "434105ed-43f6-45c7-a02f-909b2ba83430",
                              "CostManagementReader": "72fafb9e-0641-4937-9268-a91bfd8191a3",
                              "DICOMDataOwner": "58a3b984-7adf-4c20-983a-32417c86fbc8",
                              "DICOMDataReader": "e89c7a3c-2f64-4fa1-a847-3e4c9ba4283a",
                              "DNSResolverContributor": "0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d",
                              "DNSZoneContributor": "befefa01-2a29-4197-83a8-272ff33ce314",
                              "DataBoxContributor": "add466c9-e687-43fc-8d98-dfcf8d720be5",
                              "DataBoxReader": "028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027",
                              "DataFactoryContributor": "673868aa-7521-48a0-acc6-0f60742d39f5",
                              "DataLabelingLabeler": "c6decf44-fd0a-444c-a844-d653c394e7ab",
                              "DataLakeAnalyticsDeveloper": "47b7735b-770e-4598-a7da-8b91488b4c88",
                              "DataOperatorForManagedDisks": "959f8984-c045-4866-89c7-12bf9737be2e",
                              "DataPurger": "150f5e0c-0603-4f03-8c7f-cf70034c4e90",
                              "DesktopVirtualizationApplicationGroupContributor": "86240b0e-9422-4c43-887b-b61143f32ba8",
                              "DesktopVirtualizationApplicationGroupReader": "aebf23d0-b568-4e86-b8f9-fe83a2c6ab55",
                              "DesktopVirtualizationContributor": "082f0a83-3be5-4ba1-904c-961cca79b387",
                              "DesktopVirtualizationHostPoolContributor": "e307426c-f9b6-4e81-87de-d99efb3c32bc",
                              "DesktopVirtualizationHostPoolReader": "ceadfde2-b300-400a-ab7b-6143895aa822",
                              "DesktopVirtualizationPowerOnContributor": "489581de-a3bd-480d-9518-53dea7416b33",
                              "DesktopVirtualizationPowerOnOffContributor": "40c5ff49-9181-41f8-ae61-143b0e78555e",
                              "DesktopVirtualizationReader": "49a72310-ab8d-41df-bbb0-79b649203868",
                              "DesktopVirtualizationSessionHostOperator": "2ad6aaab-ead9-4eaa-8ac5-da422f562408",
                              "DesktopVirtualizationUser": "1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63",
                              "DesktopVirtualizationUserSessionOperator": "ea4bfff8-7fb4-485a-aadd-d4129a0ffaa6",
                              "DesktopVirtualizationVirtualMachineContributor": "a959dbd1-f747-45e3-8ba6-dd80f235f97c",
                              "DesktopVirtualizationWorkspaceContributor": "21efdde3-836f-432b-bf3d-3e8e734d4b2b",
                              "DesktopVirtualizationWorkspaceReader": "0fa44ee9-7a7d-466b-9bb2-2bf446b1204d",
                              "DevCenterDevBoxUser": "45d50f46-0b78-4001-a660-4198cbe8cd05",
                              "DevCenterProjectAdmin": "331c37c6-af14-46d9-b9f4-e1909e1b95a0",
                              "DevTestLabsUser": "76283e04-6283-4c54-8f91-bcf1374a3c64",
                              "DeviceProvisioningServiceDataContributor": "dfce44e4-17b7-4bd1-a6d1-04996ec95633",
                              "DeviceProvisioningServiceDataReader": "10745317-c249-44a1-a5ce-3a4353c0bbd8",
                              "DeviceUpdateAdministrator": "02ca0879-e8e4-47a5-a61e-5c618b76e64a",
                              "DeviceUpdateContentAdministrator": "0378884a-3af5-44ab-8323-f5b22f9f3c98",
                              "DeviceUpdateContentReader": "d1ee9a80-8b14-47f0-bdc2-f4a351625a7b",
                              "DeviceUpdateDeploymentsAdministrator": "e4237640-0e3d-4a46-8fda-70bc94856432",
                              "DeviceUpdateDeploymentsReader": "49e2f5d2-7741-4835-8efa-19e1fe35e47f",
                              "DeviceUpdateReader": "e9dba6fb-3d52-4cf0-bce3-f06ce71b9e0f",
                              "DiskBackupReader": "3e5e47e6-65f7-47ef-90b5-e5dd4d455f24",
                              "DiskPoolOperator": "60fc6e62-5479-42d4-8bf4-67625fcc2840",
                              "DiskRestoreOperator": "b50d9833-a0cb-478e-945f-707fcc997c13",
                              "DiskSnapshotContributor": "7efff54f-a5b4-42b5-a1c5-5411624893ce",
                              "DocumentDBAccountContributor": "5bd9cd88-fe45-4216-938b-f97437e15450",
                              "DomainServicesContributor": "eeaeda52-9324-47f6-8069-5d5bade478b2",
                              "DomainServicesReader": "361898ef-9ed1-48c2-849c-a832951106bb",
                              "ElasticSANOwner": "80dcbedb-47ef-405d-95bd-188a1b4ac406",
                              "ElasticSANReader": "af6a70f8-3c9f-4105-acf1-d719e9fca4ca",
                              "ElasticSANVolumeGroupOwner": "a8281131-f312-4f34-8d98-ae12be9f0d23",
                              "EventGridContributor": "1e241071-0855-49ea-94dc-649edcd759de",
                              "EventGridDataSender": "d5a91429-5739-47e2-a06b-3470a27159e7",
                              "EventGridEventSubscriptionContributor": "428e0ff0-5e57-4d9c-a221-2c70d0e0a443",
                              "EventGridEventSubscriptionReader": "2414bbcf-6497-4faf-8c65-045460748405",
                              "ExperimentationAdministrator": "7f646f1b-fa08-80eb-a33b-edd6ce5c915c",
                              "ExperimentationContributor": "7f646f1b-fa08-80eb-a22b-edd6ce5c915c",
                              "ExperimentationMetricContributor": "6188b7c9-7d01-4f99-a59f-c88b630326c0",
                              "ExperimentationReader": "49632ef5-d9ac-41f4-b8e7-bbe587fa74a1",
                              "FHIRDataContributor": "5a1fc7df-4bf1-4951-a576-89034ee01acd",
                              "FHIRDataConverter": "a1705bd2-3a8f-45a5-8683-466fcfd5cc24",
                              "FHIRDataExporter": "3db33094-8700-4567-8da5-1501d4e7e843",
                              "FHIRDataImporter": "4465e953-8ced-4406-a58e-0f6e3f3b530b",
                              "FHIRDataReader": "4c8d0bbc-75d3-4935-991f-5f3c56d81508",
                              "FHIRDataWriter": "3f88fce4-5892-4214-ae73-ba5294559913",
                              "GrafanaAdmin": "22926164-76b3-42b3-bc55-97df8dab3e41",
                              "GrafanaEditor": "a79a5197-3a5c-4973-a920-486035ffd60f",
                              "GrafanaViewer": "60921a7e-fef1-4a43-9b16-a26c52ad4769",
                              "GraphOwner": "b60367af-1334-4454-b71e-769d9a4f83d9",
                              "GuestConfigurationResourceContributor": "088ab73d-1256-47ae-bea9-9de8e7131f31",
                              "HDInsightClusterOperator": "61ed4efc-fab3-44fd-b111-e24485cc132a",
                              "HDInsightDomainServicesContributor": "8d8d5a11-05d3-4bda-a417-a08778121c7c",
                              "HierarchySettingsAdministrator": "350f8d15-c687-4448-8ae1-157740a3936d",
                              "HybridServerOnboarding": "5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb",
                              "HybridServerResourceAdministrator": "48b40c6e-82e0-4eb3-90d5-19e40f49b624",
                              "IntegrationServiceEnvironmentContributor": "a41e2c5b-bd99-4a07-88f4-9bf657a760b8",
                              "IntegrationServiceEnvironmentDeveloper": "c7aa55d3-1abb-444a-a5ca-5e51e485d6ec",
                              "IntelligentSystemsAccountContributor": "03a6d094-3444-4b3d-88af-7477090a9e5e",
                              "IoTHubDataContributor": "4fc6c259-987e-4a07-842e-c321cc9d413f",
                              "IoTHubDataReader": "b447c946-2db7-41ec-983d-d8bf3b1c77e3",
                              "IoTHubRegistryContributor": "4ea46cd5-c1b2-4a8e-910b-273211f9ce47",
                              "IoTHubTwinContributor": "494bdba2-168f-4f31-a0a1-191d2f7c028c",
                              "KeyVaultAdministrator": "00482a5a-887f-4fb3-b363-3b7fe8e74483",
                              "KeyVaultCertificatesOfficer": "a4417e6f-fecd-4de8-b567-7b0420556985",
                              "KeyVaultContributor": "f25e0fa2-a7c8-4377-a976-54943a77a395",
                              "KeyVaultCryptoOfficer": "14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
                              "KeyVaultCryptoServiceEncryptionUser": "e147488a-f6f5-4113-8e2d-b22465e65bf6",
                              "KeyVaultCryptoUser": "12338af0-0e69-4776-bea7-57ae8d297424",
                              "KeyVaultReader": "21090545-7ca7-4776-b22c-e363652d74d2",
                              "KeyVaultSecretsOfficer": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
                              "KeyVaultSecretsUser": "4633458b-17de-408a-b874-0445c86b69e6",
                              "KnowledgeConsumer": "ee361c5d-f7b5-4119-b4b6-892157c8f64c",
                              "KubernetesClusterAzureArcOnboarding": "34e09817-6cbe-4d01-b1a2-e0eac5743d41",
                              "KubernetesExtensionContributor": "85cb6faf-e071-4c9b-8136-154b5a04f717",
                              "KubernetesNamespaceUser": "ba79058c-0414-4a34-9e42-c3399d80cd5a",
                              "LabAssistant": "ce40b423-cede-4313-a93f-9b28290b72e1",
                              "LabContributor": "5daaa2af-1fe8-407c-9122-bba179798270",
                              "LabCreator": "b97fb8bc-a8b2-4522-a38b-dd33c7e65ead",
                              "LabOperator": "a36e6959-b6be-4b12-8e9f-ef4b474d304d",
                              "LabServicesContributor": "f69b8690-cc87-41d6-b77a-a4bc3c0a966f",
                              "LabServicesReader": "2a5c394f-5eb7-4d4f-9c8e-e8eae39faebc",
                              "LoadTestContributor": "749a398d-560b-491b-bb21-08924219302e",
                              "LoadTestOwner": "45bb0b16-2f0c-4e78-afaa-a07599b003f6",
                              "LoadTestReader": "3ae3fb29-0000-4ccd-bf80-542e7b26e081",
                              "LogAnalyticsContributor": "92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                              "LogAnalyticsReader": "73c42c96-874c-492b-b04d-ab87d138a893",
                              "LogicAppContributor": "87a39d53-fc1b-424a-814c-f7e04687dc9e",
                              "LogicAppOperator": "515c2055-d9d4-4321-b1b9-bd0c9a0f79fe",
                              "ManagedApplicationContributorRole": "641177b8-a67a-45b9-a033-47bc880bb21e",
                              "ManagedApplicationOperatorRole": "c7393b34-138c-406f-901b-d8cf2b17e6ae",
                              "ManagedApplicationsReader": "b9331d33-8a36-4f8c-b097-4f54124fdb44",
                              "ManagedHSMContributor": "18500a29-7fe2-46b2-a342-b16a415e101d",
                              "ManagedIdentityContributor": "e40ec5ca-96e0-45a2-b4ff-59039f2c2b59",
                              "ManagedIdentityOperator": "f1a07417-d97a-45cb-824c-7a7467783830",
                              "ManagedServicesRegistrationAssignmentDeleteRole": "91c1777a-f3dc-4fae-b103-61d183457e46",
                              "ManagementGroupContributor": "5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c",
                              "ManagementGroupReader": "ac63b705-f282-497d-ac71-919bf39d939d",
                              "MediaServicesAccountAdministrator": "054126f8-9a2b-4f1c-a9ad-eca461f08466",
                              "MediaServicesLiveEventsAdministrator": "532bc159-b25e-42c0-969e-a1d439f60d77",
                              "MediaServicesMediaOperator": "e4395492-1534-4db2-bedf-88c14621589c",
                              "MediaServicesPolicyAdministrator": "c4bba371-dacd-4a26-b320-7250bca963ae",
                              "MediaServicesStreamingEndpointsAdministrator": "99dba123-b5fe-44d5-874c-ced7199a5804",
                              "MicrosoftDevCenterDeploymentEnvironmentsUser": "18e40d4e-8d2e-438d-97e1-9528336e149c",
                              "MicrosoftKubernetesConnectedClusterRole": "5548b2cf-c94c-4228-90ba-30851930a12f",
                              "MicrosoftSentinelAutomationContributor": "f4c81013-99ee-4d62-a7ee-b3f1f648599a",
                              "MicrosoftSentinelContributor": "ab8e14d6-4a74-4a29-9ba8-549422addade",
                              "MicrosoftSentinelPlaybookOperator": "51d6186e-6489-4900-b93f-92e23144cca5",
                              "MicrosoftSentinelReader": "8d289c81-5878-46d4-8554-54e1e3d8b5cb",
                              "MicrosoftSentinelResponder": "3e150937-b8fe-4cfb-8069-0eaf05ecd056",
                              "MonitoringContributor": "749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              "MonitoringDataReader": "b0d8363b-8ddd-447d-831f-62ca05bff136",
                              "MonitoringMetricsPublisher": "3913510d-42f4-4e42-8a64-420c390055eb",
                              "MonitoringReader": "43d0d8ad-25c7-4714-9337-8ba259a9fe05",
                              "NetworkContributor": "4d97b98b-1d4f-4787-a291-c67834d212e7",
                              "NewRelicAPMAccountContributor": "5d28c62d-5b37-4476-8438-e587778df237",
                              "ObjectAnchorsAccountOwner": "ca0835dd-bacc-42dd-8ed2-ed5e7230d15b",
                              "ObjectAnchorsAccountReader": "4a167cdf-cb95-4554-9203-2347fe489bd9",
                              "ObjectUnderstandingAccountOwner": "4dd61c23-6743-42fe-a388-d8bdd41cb745",
                              "ObjectUnderstandingAccountReader": "d18777c0-1514-4662-8490-608db7d334b6",
                              "Owner": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                              "PlayFabContributor": "0c8b84dc-067c-4039-9615-fa1a4b77c726",
                              "PlayFabReader": "a9a19cc5-31f4-447c-901f-56c0bb18fcaf",
                              "PolicyInsightsDataWriter": "66bb4e9e-b016-4a94-8249-4c0511c2be84",
                              "PrivateDNSZoneContributor": "b12aa53e-6015-4669-85d0-8515ebb3ae7f",
                              "ProjectBabylonDataCurator": "9ef4ef9c-a049-46b0-82ab-dd8ac094c889",
                              "ProjectBabylonDataReader": "c8d896ba-346d-4f50-bc1d-7d1c84130446",
                              "ProjectBabylonDataSourceAdministrator": "05b7651b-dc44-475e-b74d-df3db49fae0f",
                              "PurviewRole1": "8a3c2885-9b38-4fd2-9d99-91af537c1347",
                              "PurviewRole2": "200bba9e-f0c8-430f-892b-6f0794863803",
                              "PurviewRole3": "ff100721-1b9d-43d8-af52-42b69c1272db",
                              "QuotaRequestOperator": "0e5f05e5-9ab9-446b-b98d-1e2157c94125",
                              "Reader": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
                              "ReaderAndDataAccess": "c12c1c16-33a1-487b-954d-41c89c60f349",
                              "RedisCacheContributor": "e0f68234-74aa-48ed-b826-c38b57376e17",
                              "RemoteRenderingAdministrator": "3df8b902-2a6f-47c7-8cc5-360e9b272a7e",
                              "RemoteRenderingClient": "d39065c4-c120-43c9-ab0a-63eed9795f0a",
                              "ReservationPurchaser": "f7b75c60-3036-4b75-91c3-6b41c27c1689",
                              "ResourcePolicyContributor": "36243c78-bf99-498c-9df9-86d9f8d28608",
                              "RoleBasedAccessControlAdministrator": "f58310d9-a9f6-439a-9e8d-f62e7b41a168",
                              "SQLDBContributor": "9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
                              "SQLManagedInstanceContributor": "4939a1f6-9ae0-4e48-a1e0-f2cbe897382d",
                              "SQLSecurityManager": "056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                              "SQLServerContributor": "6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437",
                              "ScheduledPatchingContributor": "cd08ab90-6b14-449c-ad9a-8f8e549482c6",
                              "SchedulerJobCollectionsContributor": "188a0f2f-5c9e-469b-ae67-2aa5ce574b94",
                              "SchemaRegistryContributor": "5dffeca3-4936-4216-b2bc-10343a5abb25",
                              "SchemaRegistryReader": "2c56ea50-c6b3-40a6-83c0-9d98858bc7d2",
                              "SearchIndexDataContributor": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                              "SearchIndexDataReader": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
                              "SearchServiceContributor": "7ca78c08-252a-4471-8644-bb5ff32d4ba0",
                              "SecurityAdmin": "fb1c8493-542b-48eb-b624-b4c8fea62acd",
                              "SecurityAssessmentContributor": "612c2aa1-cb24-443b-ac28-3ab7272de6f5",
                              "SecurityDetonationChamberPublisher": "352470b3-6a9c-4686-b503-35deb827e500",
                              "SecurityDetonationChamberReader": "28241645-39f8-410b-ad48-87863e2951d5",
                              "SecurityDetonationChamberSubmissionManager": "a37b566d-3efa-4beb-a2f2-698963fa42ce",
                              "SecurityDetonationChamberSubmitter": "0b555d9b-b4a7-4f43-b330-627f0e5be8f0",
                              "SecurityManager": "e3d13bf0-dd5a-482e-ba6b-9b8433878d10",
                              "SecurityReader": "39bc4728-0917-49c7-9d2c-d95423bc2eb4",
                              "ServicesHubOperator": "82200a5b-e217-47a5-b665-6d8765ee745b",
                              "SignalRAccessKeyReader": "04165923-9d83-45d5-8227-78b77b0a687e",
                              "SignalRAppServer": "420fcaa2-552c-430f-98ca-3264be4806c7",
                              "SignalRRESTAPIOwner": "fd53cd77-2268-407a-8f46-7e7863d0f521",
                              "SignalRRESTAPIReader": "ddde6b66-c0df-4114-a159-3618637b3035",
                              "SignalRServiceOwner": "7e4f1700-ea5a-4f59-8f37-079cfe29dce3",
                              "SignalRWebPubSubContributor": "8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761",
                              "SiteRecoveryContributor": "6670b86e-a3f7-4917-ac9b-5d6ab1be4567",
                              "SiteRecoveryOperator": "494ae006-db33-4328-bf46-533a6560a3ca",
                              "SiteRecoveryReader": "dbaa88c4-0c30-4179-9fb3-46319faa6149",
                              "SpatialAnchorsAccountContributor": "8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827",
                              "SpatialAnchorsAccountOwner": "70bbe301-9835-447d-afdd-19eb3167307c",
                              "SpatialAnchorsAccountReader": "5d51204f-eb77-4b1c-b86a-2ec626c49413",
                              "StorageAccountBackupContributor": "e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1",
                              "StorageAccountContributor": "17d1049b-9a84-46fb-8f53-869881c3d3ab",
                              "StorageAccountKeyOperatorServiceRole": "81a9662b-bebf-436f-a333-f67b29880f12",
                              "StorageBlobDataContributor": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                              "StorageBlobDataOwner": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                              "StorageBlobDataReader": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                              "StorageBlobDelegator": "db58b8e5-c6ad-4a2a-8342-4190687cbf4a",
                              "StorageFileDataSMBShareContributor": "0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                              "StorageFileDataSMBShareElevatedContributor": "a7264617-510b-434b-a828-9731dc254ea7",
                              "StorageFileDataSMBShareReader": "aba4ae5f-2193-4029-9191-0cb91df5e314",
                              "StorageQueueDataContributor": "974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                              "StorageQueueDataMessageProcessor": "8a0f0c08-91a1-4084-bc3d-661d67233fed",
                              "StorageQueueDataMessageSender": "c6a89b2d-59bc-44d0-9896-0f6e12d7b80a",
                              "StorageQueueDataReader": "19e7f393-937e-4f77-808e-94535e297925",
                              "StorageTableDataContributor": "0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                              "StorageTableDataReader": "76199698-9eea-4c19-bc75-cec21354c6b6",
                              "StreamAnalyticsQueryTester": "1ec5b3c1-b17e-4e25-8312-2acb3c3c5abf",
                              "SupportRequestContributor": "cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e",
                              "TagContributor": "4a9ae827-6dc8-4573-8ac7-8239d42aa03f",
                              "TemplateSpecContributor": "1c9b6475-caf0-4164-b5a1-2142a7116f4b",
                              "TemplateSpecReader": "392ae280-861d-42bd-9ea5-08ee6d83b80e",
                              "TestBaseReader": "15e0f5a1-3450-4248-8e25-e2afe88a9e85",
                              "TrafficManagerContributor": "a4b10055-b0c7-44c2-b00f-c7b5b3550cf7",
                              "UserAccessAdministrator": "18d7d88d-d35e-4fb5-a5c3-7773c20a72d9",
                              "VMScannerOperator": "d24ecba3-c1f4-40fa-a7bb-4588a071e8fd",
                              "VideoIndexerRestrictedViewer": "a2c4a527-7dc0-4ee3-897b-403ade70fafb",
                              "VirtualMachineAdministratorLogin": "1c0163c0-47e6-4577-8991-ea5c82e286e4",
                              "VirtualMachineContributor": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                              "VirtualMachineLocalUserLogin": "602da2ba-a5c2-41da-b01d-5360126ab525",
                              "VirtualMachineUserLogin": "fb879df8-f326-4884-b1cf-06f3ad86be52",
                              "WebPlanContributor": "2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b",
                              "WebPubSubServiceOwner": "12cf5a90-567b-43ae-8102-96cf46c7d9b4",
                              "WebPubSubServiceReader": "bfb1c7d2-fb1a-466b-b2ba-aee63b92deaf",
                              "WebsiteContributor": "de139f84-1756-47ae-9be6-808fbbe84772",
                              "WindowsAdminCenterAdministratorLogin": "a6333a3e-0164-44c3-b281-7a577aff287f",
                              "WorkbookContributor": "e8ddcd69-c73f-4f9f-9844-4100522f16ad",
                              "WorkbookReader": "b279062a-9be3-42a0-92ae-8b3cf002ec4d",
                              "WorkloadBuilderMigrationAgentRole": "d17ce0a2-0697-43bc-aac5-9113337ab61c"
                            },
                            "builtinRoles": "[variables('$fxv#0')]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignmentSA",
                                "count": "[length(parameters('roles'))]"
                              },
                              "condition": "[equals(parameters('kind'), 'storage')]",
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                              "name": "[guid(resourceGroup().id, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), parameters('name'), parameters('roles')[copyIndex()])]",
                              "properties": {
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('builtinRoles')[replace(parameters('roles')[copyIndex()], ' ', '')])]",
                                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), '2022-01-31-preview').principalId]",
                                "principalType": "ServicePrincipal"
                              }
                            },
                            {
                              "copy": {
                                "name": "roleAssignmentACR",
                                "count": "[length(parameters('roles'))]"
                              },
                              "condition": "[equals(parameters('kind'), 'acr')]",
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                              "name": "[guid(resourceGroup().id, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), parameters('name'), parameters('roles')[copyIndex()])]",
                              "properties": {
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('builtinRoles')[replace(parameters('roles')[copyIndex()], ' ', '')])]",
                                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), '2022-01-31-preview').principalId]",
                                "principalType": "ServicePrincipal"
                              }
                            },
                            {
                              "copy": {
                                "name": "roleAssignmentBA",
                                "count": "[length(parameters('roles'))]"
                              },
                              "condition": "[equals(parameters('kind'), 'ba')]",
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Batch/batchAccounts/{0}', parameters('name'))]",
                              "name": "[guid(resourceGroup().id, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), parameters('name'), parameters('roles')[copyIndex()])]",
                              "properties": {
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('builtinRoles')[replace(parameters('roles')[copyIndex()], ' ', '')])]",
                                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), '2022-01-31-preview').principalId]",
                                "principalType": "ServicePrincipal"
                              }
                            },
                            {
                              "copy": {
                                "name": "roleAssignmentRG",
                                "count": "[length(parameters('roles'))]"
                              },
                              "condition": "[equals(parameters('kind'), 'rg')]",
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(resourceGroup().id, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), parameters('roles')[copyIndex()])]",
                              "properties": {
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('builtinRoles')[replace(parameters('roles')[copyIndex()], ' ', '')])]",
                                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), '2022-01-31-preview').principalId]",
                                "principalType": "ServicePrincipal"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('batch-{0}', variables('dplSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-{0}', variables('dplSuffix')))]"
              ],
              "metadata": {
                "description": "deploy role assignments"
              }
            },
            {
              "copy": {
                "name": "dplRoleAssignmentsHub",
                "count": "[length(variables('hubConfigSanitized').managedIdentities)]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('roleAssignments-{0}-{1}', copyIndex(), variables('dplSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "miConfig": {
                    "value": "[variables('hubConfigSanitized').managedIdentities[copyIndex()]]"
                  },
                  "roleAssignments": {
                    "value": "[union(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('batch-{0}', variables('dplSuffix'))), '2022-09-01').outputs.roleAssignments.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-{0}', variables('dplSuffix'))), '2022-09-01').outputs.roleAssignments.value, union(createArray(createObject('kind', 'rg', 'name', parameters('resourceGroupName'), 'group', parameters('resourceGroupName'), 'roles', createArray('Reader')), createObject('kind', 'ba', 'name', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('batch-{0}', variables('dplSuffix'))), '2022-09-01').outputs.batchAccountName.value, 'group', parameters('resourceGroupName'), 'roles', createArray('Contributor'))), if(parameters('enableApplicationContainers'), createArray(createObject('kind', 'acr', 'name', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('batch-{0}', variables('dplSuffix'))), '2022-09-01').outputs.acrName.value, 'group', parameters('resourceGroupName'), 'roles', createArray('Contributor'))), createArray())))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.21.1.54444",
                      "templateHash": "11474686836054391008"
                    }
                  },
                  "parameters": {
                    "miConfig": {
                      "type": "object"
                    },
                    "roleAssignments": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "dplSuffix": "[uniqueString(deployment().name)]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "roles",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[take(format('roles-{0}-{1}-{2}', copyIndex(), parameters('roleAssignments')[copyIndex()].name, variables('dplSuffix')), 64)]",
                      "resourceGroup": "[parameters('roleAssignments')[copyIndex()].group]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "kind": {
                            "value": "[parameters('roleAssignments')[copyIndex()].kind]"
                          },
                          "name": {
                            "value": "[parameters('roleAssignments')[copyIndex()].name]"
                          },
                          "roles": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roles]"
                          },
                          "miConfig": {
                            "value": "[parameters('miConfig')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.21.1.54444",
                              "templateHash": "10702426060679684626"
                            }
                          },
                          "parameters": {
                            "kind": {
                              "type": "string",
                              "allowedValues": [
                                "acr",
                                "ba",
                                "storage",
                                "rg"
                              ]
                            },
                            "name": {
                              "type": "string"
                            },
                            "roles": {
                              "type": "array"
                            },
                            "miConfig": {
                              "type": "object",
                              "metadata": {
                                "name": "resource name",
                                "group": "resource group name"
                              }
                            }
                          },
                          "variables": {
                            "$fxv#0": {
                              "APIManagementDeveloperPortalContentEditor": "c031e6a8-4391-4de0-8d69-4706a7ed3729",
                              "APIManagementServiceContributor": "312a565d-c81f-4fd8-895a-4e21e48d571c",
                              "APIManagementServiceOperatorRole": "e022efe7-f5ba-4159-bbe4-b44f577e9b61",
                              "APIManagementServiceReaderRole": "71522526-b88f-4d52-b57f-d31fc3546d0d",
                              "AccessReviewOperatorServiceRole": "76cc9ee4-d5d3-4a45-a930-26add3d73475",
                              "AcrDelete": "c2f4ef07-c644-48eb-af81-4b1b4947fb11",
                              "AcrImageSigner": "6cef56e8-d556-48e5-a04f-b8e64114680f",
                              "AcrPull": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
                              "AcrPush": "8311e382-0749-4cb8-b61a-304f252e45ec",
                              "AcrQuarantineReader": "cdda3590-29a3-44f6-95f2-9f980659eb04",
                              "AcrQuarantineWriter": "c8d4ff99-41c3-41a8-9f60-21dfdad59608",
                              "AgFoodPlatformSensorPartnerContributor": "6b77f0a0-0d89-41cc-acd1-579c22c17a67",
                              "AgFoodPlatformServiceAdmin": "f8da80de-1ff9-4747-ad80-a19b7f6079e3",
                              "AgFoodPlatformServiceContributor": "8508508a-4469-4e45-963b-2518ee0bb728",
                              "AgFoodPlatformServiceReader": "7ec7ccdc-f61e-41fe-9aaf-980df0a44eba",
                              "AnyBuildBuilder": "a2138dac-4907-4679-a376-736901ed8ad8",
                              "AppConfigurationDataOwner": "5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b",
                              "AppConfigurationDataReader": "516239f1-63e1-4d78-a4de-a74fb236a071",
                              "ApplicationGroupContributor": "ca6382a4-1721-4bcf-a114-ff0c70227b6b",
                              "ApplicationInsightsComponentContributor": "ae349356-3a1b-4a5e-921d-050484c6347e",
                              "ApplicationInsightsSnapshotDebugger": "08954f03-6346-4c2e-81c0-ec3a5cfae23b",
                              "AttestationContributor": "bbf86eb8-f7b4-4cce-96e4-18cddf81d86e",
                              "AttestationReader": "fd1bd22b-8476-40bc-a0bc-69b95687b9f3",
                              "AutomationContributor": "f353d9bd-d4a6-484e-a77a-8050b599b867",
                              "AutomationJobOperator": "4fe576fe-1146-4730-92eb-48519fa6bf9f",
                              "AutomationOperator": "d3881f73-407a-4167-8283-e981cbba0404",
                              "AutomationRunbookOperator": "5fb5aef8-1081-4b8e-bb16-9d5d0385bab5",
                              "AutonomousDevelopmentPlatformDataContributor": "b8b15564-4fa6-4a59-ab12-03e1d9594795",
                              "AutonomousDevelopmentPlatformDataOwner": "27f8b550-c507-4db9-86f2-f4b8e816d59d",
                              "AutonomousDevelopmentPlatformDataReader": "d63b75f7-47ea-4f27-92ac-e0d173aaf093",
                              "AvereContributor": "4f8fab4f-1852-4a58-a46a-8eaf358af14a",
                              "AvereOperator": "c025889f-8102-4ebf-b32c-fc0c6f0c6bd9",
                              "AzureArcEnabledKubernetesClusterUserRole": "00493d72-78f6-4148-b6c5-d3ce8e4799dd",
                              "AzureArcKubernetesAdmin": "dffb1e0c-446f-4dde-a09f-99eb5cc68b96",
                              "AzureArcKubernetesClusterAdmin": "8393591c-06b9-48a2-a542-1bd6b377f6a2",
                              "AzureArcKubernetesViewer": "63f0a09d-1495-4db4-a681-037d84835eb4",
                              "AzureArcKubernetesWriter": "5b999177-9696-4545-85c7-50de3797e5a1",
                              "AzureArcScVmmAdministratorRole": "a92dfd61-77f9-4aec-a531-19858b406c87",
                              "AzureArcScVmmPrivateCloudUser": "c0781e91-8102-4553-8951-97c6d4243cda",
                              "AzureArcScVmmPrivateCloudsOnboarding": "6aac74c4-6311-40d2-bbdd-7d01e7c6e3a9",
                              "AzureArcScVmmVMContributor": "e582369a-e17b-42a5-b10c-874c387c530b",
                              "AzureArcVMwareAdministratorRole": "ddc140ed-e463-4246-9145-7c664192013f",
                              "AzureArcVMwarePrivateCloudUser": "ce551c02-7c42-47e0-9deb-e3b6fc3a9a83",
                              "AzureArcVMwarePrivateCloudsOnboarding": "67d33e57-3129-45e6-bb0b-7cc522f762fa",
                              "AzureArcVMwareVMContributor": "b748a06d-6150-4f8a-aaa9-ce3940cd96cb",
                              "AzureConnectedMachineOnboarding": "b64e21ea-ac4e-4cdf-9dc9-5b892992bee7",
                              "AzureConnectedMachineResourceAdministrator": "cd570a14-e51a-42ad-bac8-bafd67325302",
                              "AzureConnectedSQLServerOnboarding": "e8113dce-c529-4d33-91fa-e9b972617508",
                              "AzureDigitalTwinsDataOwner": "bcd981a7-7f74-457b-83e1-cceb9e632ffe",
                              "AzureDigitalTwinsDataReader": "d57506d4-4c8d-48b1-8587-93c323f6a5a3",
                              "AzureEventHubsDataOwner": "f526a384-b230-433a-b45c-95f59c4a2dec",
                              "AzureEventHubsDataReceiver": "a638d3c7-ab3a-418d-83e6-5f17a39d4fde",
                              "AzureEventHubsDataSender": "2b629674-e913-4c01-ae53-ef4638d8f975",
                              "AzureKubernetesFleetManagerContributorRole": "63bb64ad-9799-4770-b5c3-24ed299a07bf",
                              "AzureKubernetesFleetManagerRBACAdmin": "434fb43a-c01c-447e-9f67-c3ad923cfaba",
                              "AzureKubernetesFleetManagerRBACClusterAdmin": "18ab4d3d-a1bf-4477-8ad9-8359bc988f69",
                              "AzureKubernetesFleetManagerRBACReader": "30b27cfc-9c84-438e-b0ce-70e35255df80",
                              "AzureKubernetesFleetManagerRBACWriter": "5af6afb3-c06c-4fa4-8848-71a8aee05683",
                              "AzureKubernetesServiceClusterAdminRole": "0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8",
                              "AzureKubernetesServiceClusterUserRole": "4abbcc35-e782-43d8-92c5-2d3f1bd2253f",
                              "AzureKubernetesServiceContributorRole": "ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8",
                              "AzureKubernetesServicePolicyAddOnDeployment": "18ed5180-3e48-46fd-8541-4ea054d57064",
                              "AzureKubernetesServiceRBACAdmin": "3498e952-d568-435e-9b2c-8d77e338d7f7",
                              "AzureKubernetesServiceRBACClusterAdmin": "b1ff04bb-8a4e-4dc4-8eb5-8693973ce19b",
                              "AzureKubernetesServiceRBACReader": "7f6c6a51-bcf8-42ba-9220-52d62157d7db",
                              "AzureKubernetesServiceRBACWriter": "a7ffa36f-339b-4b5c-8bdf-e2c188b2c0eb",
                              "AzureMLComputeOperator": "e503ece1-11d0-4e8e-8e2c-7a6c3bf38815",
                              "AzureMLDataScientist": "f6c7c914-8db3-469d-8ca1-694a8f32e121",
                              "AzureMLMetricsWriter": "635dd51f-9968-44d3-b7fb-6d9a6bd613ae",
                              "AzureMLRegistryUser": "1823dd4f-9b8c-4ab6-ab4e-7397a3684615",
                              "AzureMapsContributor": "dba33070-676a-4fb0-87fa-064dc56ff7fb",
                              "AzureMapsDataContributor": "8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204",
                              "AzureMapsDataReader": "423170ca-a8f6-4b0f-8487-9e4eb8f49bfa",
                              "AzureMapsSearchAndRenderDataReader": "6be48352-4f82-47c9-ad5e-0acacefdb005",
                              "AzureRelayListener": "26e0b698-aa6d-4085-9386-aadae190014d",
                              "AzureRelayOwner": "2787bf04-f1f5-4bfe-8383-c8a24483ee38",
                              "AzureRelaySender": "26baccc8-eea7-41f1-98f4-1762cc7f685d",
                              "AzureServiceBusDataOwner": "090c5cfd-751d-490a-894a-3ce6f1109419",
                              "AzureServiceBusDataReceiver": "4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0",
                              "AzureServiceBusDataSender": "69a216fc-b8fb-44d8-bc22-1f3c2cd27a39",
                              "AzureSpringAppsConnectRole": "80558df3-64f9-4c0f-b32d-e5094b036b0b",
                              "AzureSpringAppsRemoteDebuggingRole": "a99b0159-1064-4c22-a57b-c9b3caa1c054",
                              "AzureSpringCloudConfigServerContributor": "a06f5c24-21a7-4e1a-aa2b-f19eb6684f5b",
                              "AzureSpringCloudConfigServerReader": "d04c6db6-4947-4782-9e91-30a88feb7be7",
                              "AzureSpringCloudDataReader": "b5537268-8956-4941-a8f0-646150406f0c",
                              "AzureSpringCloudServiceRegistryContributor": "f5880b48-c26d-48be-b172-7927bfa1c8f1",
                              "AzureSpringCloudServiceRegistryReader": "cff1b556-2399-4e7e-856d-a8f754be7b65",
                              "AzureStackRegistrationOwner": "6f12a6df-dd06-4f3e-bcb1-ce8be600526a",
                              "AzureVMManagedIdentitiesRestoreContributor": "6ae96244-5829-4925-a7d3-5975537d91dd",
                              "BackupContributor": "5e467623-bb1f-42f4-a55d-6e525e11384b",
                              "BackupOperator": "00c29273-979b-4161-815c-10b084fb9324",
                              "BackupReader": "a795c7a0-d4a2-40c1-ae25-d81f01202912",
                              "BillingReader": "fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64",
                              "BizTalkContributor": "5e3c6656-6cfa-4708-81fe-0de47ac73342",
                              "BlockchainMemberNodeAccess": "31a002a1-acaf-453e-8a5b-297c9ca1ea24",
                              "BlueprintContributor": "41077137-e803-4205-871c-5a86e6a753b4",
                              "BlueprintOperator": "437d2ced-4a38-4302-8479-ed2bcb43d090",
                              "CDNEndpointContributor": "426e0c7f-0c7e-4658-b36f-ff54d6c29b45",
                              "CDNEndpointReader": "871e35f6-b5c1-49cc-a043-bde969a0f2cd",
                              "CDNProfileContributor": "ec156ff8-a8d1-4d15-830c-5b80698ca432",
                              "CDNProfileReader": "8f96442b-4075-438f-813d-ad51ab4019af",
                              "ChamberAdmin": "4e9b8407-af2e-495b-ae54-bb60a55b1b5a",
                              "ChamberUser": "4447db05-44ed-4da3-ae60-6cbece780e32",
                              "ClassicNetworkContributor": "b34d265f-36f7-4a0d-a4d4-e158ca92e90f",
                              "ClassicStorageAccountContributor": "86e8f5dc-a6e9-4c67-9d15-de283e8eac25",
                              "ClassicStorageAccountKeyOperatorServiceRole": "985d6b00-f706-48f5-a6fe-d0ca12fb668d",
                              "ClassicVirtualMachineContributor": "d73bb868-a0df-4d4d-bd69-98a00b01fccb",
                              "ClearDBMySQLDBContributor": "9106cda0-8a86-4e81-b686-29a22c54effe",
                              "CodeSigningCertificateProfileSigner": "2837e146-70d7-4cfd-ad55-7efa6464f958",
                              "CodeSigningIdentityVerifier": "4339b7cf-9826-4e41-b4ed-c7f4505dac08",
                              "CognitiveServicesContributor": "25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68",
                              "CognitiveServicesCustomVisionContributor": "c1ff6cc2-c111-46fe-8896-e0ef812ad9f3",
                              "CognitiveServicesCustomVisionDeployment": "5c4089e1-6d96-4d2f-b296-c1bc7137275f",
                              "CognitiveServicesCustomVisionLabeler": "88424f51-ebe7-446f-bc41-7fa16989e96c",
                              "CognitiveServicesCustomVisionReader": "93586559-c37d-4a6b-ba08-b9f0940c2d73",
                              "CognitiveServicesCustomVisionTrainer": "0a5ae4ab-0d65-4eeb-be61-29fc9b54394b",
                              "CognitiveServicesDataReader": "b59867f0-fa02-499b-be73-45a86b5b3e1c",
                              "CognitiveServicesFaceRecognizer": "9894cab4-e18a-44aa-828b-cb588cd6f2d7",
                              "CognitiveServicesImmersiveReaderUser": "b2de6794-95db-4659-8781-7e080d3f2b9d",
                              "CognitiveServicesLUISOwner": "f72c8140-2111-481c-87ff-72b910f6e3f8",
                              "CognitiveServicesLUISReader": "18e81cdc-4e98-4e29-a639-e7d10c5a6226",
                              "CognitiveServicesLUISWriter": "6322a993-d5c9-4bed-b113-e49bbea25b27",
                              "CognitiveServicesLanguageOwner": "f07febfe-79bc-46b1-8b37-790e26e6e498",
                              "CognitiveServicesLanguageReader": "7628b7b8-a8b2-4cdc-b46f-e9b35248918e",
                              "CognitiveServicesLanguageWriter": "f2310ca1-dc64-4889-bb49-c8e0fa3d47a8",
                              "CognitiveServicesMetricsAdvisorAdministrator": "cb43c632-a144-4ec5-977c-e80c4affc34a",
                              "CognitiveServicesMetricsAdvisorUser": "3b20f47b-3825-43cb-8114-4bd2201156a8",
                              "CognitiveServicesQnAMakerEditor": "f4cc2bf9-21be-47a1-bdf1-5c5804381025",
                              "CognitiveServicesQnAMakerReader": "466ccd10-b268-4a11-b098-b4849f024126",
                              "CognitiveServicesSpeechContributor": "0e75ca1e-0464-4b4d-8b93-68208a576181",
                              "CognitiveServicesSpeechUser": "f2dc8367-1007-4938-bd23-fe263f013447",
                              "CognitiveServicesUser": "a97b65f3-24c7-4388-baec-2e87135dc908",
                              "CollaborativeDataContributor": "daa9e50b-21df-454c-94a6-a8050adab352",
                              "CollaborativeRuntimeOperator": "7a6f0e70-c033-4fb1-828c-08514e5f4102",
                              "ComputeGallerySharingAdmin": "1ef6a3be-d0ac-425d-8c01-acb62866290b",
                              "Contributor": "b24988ac-6180-42a0-ab88-20f7382dd24c",
                              "CosmosBackupOperator": "db7b14f2-5adf-42da-9f96-f2ee17bab5cb",
                              "CosmosDBAccountReaderRole": "fbdf93bf-df7d-467e-a4d2-9458aa1360c8",
                              "CosmosDBOperator": "230815da-be43-4aae-9cb4-875f7bd000aa",
                              "CosmosRestoreOperator": "5432c526-bc82-444a-b7ba-57c5b0b5b34f",
                              "CostManagementContributor": "434105ed-43f6-45c7-a02f-909b2ba83430",
                              "CostManagementReader": "72fafb9e-0641-4937-9268-a91bfd8191a3",
                              "DICOMDataOwner": "58a3b984-7adf-4c20-983a-32417c86fbc8",
                              "DICOMDataReader": "e89c7a3c-2f64-4fa1-a847-3e4c9ba4283a",
                              "DNSResolverContributor": "0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d",
                              "DNSZoneContributor": "befefa01-2a29-4197-83a8-272ff33ce314",
                              "DataBoxContributor": "add466c9-e687-43fc-8d98-dfcf8d720be5",
                              "DataBoxReader": "028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027",
                              "DataFactoryContributor": "673868aa-7521-48a0-acc6-0f60742d39f5",
                              "DataLabelingLabeler": "c6decf44-fd0a-444c-a844-d653c394e7ab",
                              "DataLakeAnalyticsDeveloper": "47b7735b-770e-4598-a7da-8b91488b4c88",
                              "DataOperatorForManagedDisks": "959f8984-c045-4866-89c7-12bf9737be2e",
                              "DataPurger": "150f5e0c-0603-4f03-8c7f-cf70034c4e90",
                              "DesktopVirtualizationApplicationGroupContributor": "86240b0e-9422-4c43-887b-b61143f32ba8",
                              "DesktopVirtualizationApplicationGroupReader": "aebf23d0-b568-4e86-b8f9-fe83a2c6ab55",
                              "DesktopVirtualizationContributor": "082f0a83-3be5-4ba1-904c-961cca79b387",
                              "DesktopVirtualizationHostPoolContributor": "e307426c-f9b6-4e81-87de-d99efb3c32bc",
                              "DesktopVirtualizationHostPoolReader": "ceadfde2-b300-400a-ab7b-6143895aa822",
                              "DesktopVirtualizationPowerOnContributor": "489581de-a3bd-480d-9518-53dea7416b33",
                              "DesktopVirtualizationPowerOnOffContributor": "40c5ff49-9181-41f8-ae61-143b0e78555e",
                              "DesktopVirtualizationReader": "49a72310-ab8d-41df-bbb0-79b649203868",
                              "DesktopVirtualizationSessionHostOperator": "2ad6aaab-ead9-4eaa-8ac5-da422f562408",
                              "DesktopVirtualizationUser": "1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63",
                              "DesktopVirtualizationUserSessionOperator": "ea4bfff8-7fb4-485a-aadd-d4129a0ffaa6",
                              "DesktopVirtualizationVirtualMachineContributor": "a959dbd1-f747-45e3-8ba6-dd80f235f97c",
                              "DesktopVirtualizationWorkspaceContributor": "21efdde3-836f-432b-bf3d-3e8e734d4b2b",
                              "DesktopVirtualizationWorkspaceReader": "0fa44ee9-7a7d-466b-9bb2-2bf446b1204d",
                              "DevCenterDevBoxUser": "45d50f46-0b78-4001-a660-4198cbe8cd05",
                              "DevCenterProjectAdmin": "331c37c6-af14-46d9-b9f4-e1909e1b95a0",
                              "DevTestLabsUser": "76283e04-6283-4c54-8f91-bcf1374a3c64",
                              "DeviceProvisioningServiceDataContributor": "dfce44e4-17b7-4bd1-a6d1-04996ec95633",
                              "DeviceProvisioningServiceDataReader": "10745317-c249-44a1-a5ce-3a4353c0bbd8",
                              "DeviceUpdateAdministrator": "02ca0879-e8e4-47a5-a61e-5c618b76e64a",
                              "DeviceUpdateContentAdministrator": "0378884a-3af5-44ab-8323-f5b22f9f3c98",
                              "DeviceUpdateContentReader": "d1ee9a80-8b14-47f0-bdc2-f4a351625a7b",
                              "DeviceUpdateDeploymentsAdministrator": "e4237640-0e3d-4a46-8fda-70bc94856432",
                              "DeviceUpdateDeploymentsReader": "49e2f5d2-7741-4835-8efa-19e1fe35e47f",
                              "DeviceUpdateReader": "e9dba6fb-3d52-4cf0-bce3-f06ce71b9e0f",
                              "DiskBackupReader": "3e5e47e6-65f7-47ef-90b5-e5dd4d455f24",
                              "DiskPoolOperator": "60fc6e62-5479-42d4-8bf4-67625fcc2840",
                              "DiskRestoreOperator": "b50d9833-a0cb-478e-945f-707fcc997c13",
                              "DiskSnapshotContributor": "7efff54f-a5b4-42b5-a1c5-5411624893ce",
                              "DocumentDBAccountContributor": "5bd9cd88-fe45-4216-938b-f97437e15450",
                              "DomainServicesContributor": "eeaeda52-9324-47f6-8069-5d5bade478b2",
                              "DomainServicesReader": "361898ef-9ed1-48c2-849c-a832951106bb",
                              "ElasticSANOwner": "80dcbedb-47ef-405d-95bd-188a1b4ac406",
                              "ElasticSANReader": "af6a70f8-3c9f-4105-acf1-d719e9fca4ca",
                              "ElasticSANVolumeGroupOwner": "a8281131-f312-4f34-8d98-ae12be9f0d23",
                              "EventGridContributor": "1e241071-0855-49ea-94dc-649edcd759de",
                              "EventGridDataSender": "d5a91429-5739-47e2-a06b-3470a27159e7",
                              "EventGridEventSubscriptionContributor": "428e0ff0-5e57-4d9c-a221-2c70d0e0a443",
                              "EventGridEventSubscriptionReader": "2414bbcf-6497-4faf-8c65-045460748405",
                              "ExperimentationAdministrator": "7f646f1b-fa08-80eb-a33b-edd6ce5c915c",
                              "ExperimentationContributor": "7f646f1b-fa08-80eb-a22b-edd6ce5c915c",
                              "ExperimentationMetricContributor": "6188b7c9-7d01-4f99-a59f-c88b630326c0",
                              "ExperimentationReader": "49632ef5-d9ac-41f4-b8e7-bbe587fa74a1",
                              "FHIRDataContributor": "5a1fc7df-4bf1-4951-a576-89034ee01acd",
                              "FHIRDataConverter": "a1705bd2-3a8f-45a5-8683-466fcfd5cc24",
                              "FHIRDataExporter": "3db33094-8700-4567-8da5-1501d4e7e843",
                              "FHIRDataImporter": "4465e953-8ced-4406-a58e-0f6e3f3b530b",
                              "FHIRDataReader": "4c8d0bbc-75d3-4935-991f-5f3c56d81508",
                              "FHIRDataWriter": "3f88fce4-5892-4214-ae73-ba5294559913",
                              "GrafanaAdmin": "22926164-76b3-42b3-bc55-97df8dab3e41",
                              "GrafanaEditor": "a79a5197-3a5c-4973-a920-486035ffd60f",
                              "GrafanaViewer": "60921a7e-fef1-4a43-9b16-a26c52ad4769",
                              "GraphOwner": "b60367af-1334-4454-b71e-769d9a4f83d9",
                              "GuestConfigurationResourceContributor": "088ab73d-1256-47ae-bea9-9de8e7131f31",
                              "HDInsightClusterOperator": "61ed4efc-fab3-44fd-b111-e24485cc132a",
                              "HDInsightDomainServicesContributor": "8d8d5a11-05d3-4bda-a417-a08778121c7c",
                              "HierarchySettingsAdministrator": "350f8d15-c687-4448-8ae1-157740a3936d",
                              "HybridServerOnboarding": "5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb",
                              "HybridServerResourceAdministrator": "48b40c6e-82e0-4eb3-90d5-19e40f49b624",
                              "IntegrationServiceEnvironmentContributor": "a41e2c5b-bd99-4a07-88f4-9bf657a760b8",
                              "IntegrationServiceEnvironmentDeveloper": "c7aa55d3-1abb-444a-a5ca-5e51e485d6ec",
                              "IntelligentSystemsAccountContributor": "03a6d094-3444-4b3d-88af-7477090a9e5e",
                              "IoTHubDataContributor": "4fc6c259-987e-4a07-842e-c321cc9d413f",
                              "IoTHubDataReader": "b447c946-2db7-41ec-983d-d8bf3b1c77e3",
                              "IoTHubRegistryContributor": "4ea46cd5-c1b2-4a8e-910b-273211f9ce47",
                              "IoTHubTwinContributor": "494bdba2-168f-4f31-a0a1-191d2f7c028c",
                              "KeyVaultAdministrator": "00482a5a-887f-4fb3-b363-3b7fe8e74483",
                              "KeyVaultCertificatesOfficer": "a4417e6f-fecd-4de8-b567-7b0420556985",
                              "KeyVaultContributor": "f25e0fa2-a7c8-4377-a976-54943a77a395",
                              "KeyVaultCryptoOfficer": "14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
                              "KeyVaultCryptoServiceEncryptionUser": "e147488a-f6f5-4113-8e2d-b22465e65bf6",
                              "KeyVaultCryptoUser": "12338af0-0e69-4776-bea7-57ae8d297424",
                              "KeyVaultReader": "21090545-7ca7-4776-b22c-e363652d74d2",
                              "KeyVaultSecretsOfficer": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
                              "KeyVaultSecretsUser": "4633458b-17de-408a-b874-0445c86b69e6",
                              "KnowledgeConsumer": "ee361c5d-f7b5-4119-b4b6-892157c8f64c",
                              "KubernetesClusterAzureArcOnboarding": "34e09817-6cbe-4d01-b1a2-e0eac5743d41",
                              "KubernetesExtensionContributor": "85cb6faf-e071-4c9b-8136-154b5a04f717",
                              "KubernetesNamespaceUser": "ba79058c-0414-4a34-9e42-c3399d80cd5a",
                              "LabAssistant": "ce40b423-cede-4313-a93f-9b28290b72e1",
                              "LabContributor": "5daaa2af-1fe8-407c-9122-bba179798270",
                              "LabCreator": "b97fb8bc-a8b2-4522-a38b-dd33c7e65ead",
                              "LabOperator": "a36e6959-b6be-4b12-8e9f-ef4b474d304d",
                              "LabServicesContributor": "f69b8690-cc87-41d6-b77a-a4bc3c0a966f",
                              "LabServicesReader": "2a5c394f-5eb7-4d4f-9c8e-e8eae39faebc",
                              "LoadTestContributor": "749a398d-560b-491b-bb21-08924219302e",
                              "LoadTestOwner": "45bb0b16-2f0c-4e78-afaa-a07599b003f6",
                              "LoadTestReader": "3ae3fb29-0000-4ccd-bf80-542e7b26e081",
                              "LogAnalyticsContributor": "92aaf0da-9dab-42b6-94a3-d43ce8d16293",
                              "LogAnalyticsReader": "73c42c96-874c-492b-b04d-ab87d138a893",
                              "LogicAppContributor": "87a39d53-fc1b-424a-814c-f7e04687dc9e",
                              "LogicAppOperator": "515c2055-d9d4-4321-b1b9-bd0c9a0f79fe",
                              "ManagedApplicationContributorRole": "641177b8-a67a-45b9-a033-47bc880bb21e",
                              "ManagedApplicationOperatorRole": "c7393b34-138c-406f-901b-d8cf2b17e6ae",
                              "ManagedApplicationsReader": "b9331d33-8a36-4f8c-b097-4f54124fdb44",
                              "ManagedHSMContributor": "18500a29-7fe2-46b2-a342-b16a415e101d",
                              "ManagedIdentityContributor": "e40ec5ca-96e0-45a2-b4ff-59039f2c2b59",
                              "ManagedIdentityOperator": "f1a07417-d97a-45cb-824c-7a7467783830",
                              "ManagedServicesRegistrationAssignmentDeleteRole": "91c1777a-f3dc-4fae-b103-61d183457e46",
                              "ManagementGroupContributor": "5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c",
                              "ManagementGroupReader": "ac63b705-f282-497d-ac71-919bf39d939d",
                              "MediaServicesAccountAdministrator": "054126f8-9a2b-4f1c-a9ad-eca461f08466",
                              "MediaServicesLiveEventsAdministrator": "532bc159-b25e-42c0-969e-a1d439f60d77",
                              "MediaServicesMediaOperator": "e4395492-1534-4db2-bedf-88c14621589c",
                              "MediaServicesPolicyAdministrator": "c4bba371-dacd-4a26-b320-7250bca963ae",
                              "MediaServicesStreamingEndpointsAdministrator": "99dba123-b5fe-44d5-874c-ced7199a5804",
                              "MicrosoftDevCenterDeploymentEnvironmentsUser": "18e40d4e-8d2e-438d-97e1-9528336e149c",
                              "MicrosoftKubernetesConnectedClusterRole": "5548b2cf-c94c-4228-90ba-30851930a12f",
                              "MicrosoftSentinelAutomationContributor": "f4c81013-99ee-4d62-a7ee-b3f1f648599a",
                              "MicrosoftSentinelContributor": "ab8e14d6-4a74-4a29-9ba8-549422addade",
                              "MicrosoftSentinelPlaybookOperator": "51d6186e-6489-4900-b93f-92e23144cca5",
                              "MicrosoftSentinelReader": "8d289c81-5878-46d4-8554-54e1e3d8b5cb",
                              "MicrosoftSentinelResponder": "3e150937-b8fe-4cfb-8069-0eaf05ecd056",
                              "MonitoringContributor": "749f88d5-cbae-40b8-bcfc-e573ddc772fa",
                              "MonitoringDataReader": "b0d8363b-8ddd-447d-831f-62ca05bff136",
                              "MonitoringMetricsPublisher": "3913510d-42f4-4e42-8a64-420c390055eb",
                              "MonitoringReader": "43d0d8ad-25c7-4714-9337-8ba259a9fe05",
                              "NetworkContributor": "4d97b98b-1d4f-4787-a291-c67834d212e7",
                              "NewRelicAPMAccountContributor": "5d28c62d-5b37-4476-8438-e587778df237",
                              "ObjectAnchorsAccountOwner": "ca0835dd-bacc-42dd-8ed2-ed5e7230d15b",
                              "ObjectAnchorsAccountReader": "4a167cdf-cb95-4554-9203-2347fe489bd9",
                              "ObjectUnderstandingAccountOwner": "4dd61c23-6743-42fe-a388-d8bdd41cb745",
                              "ObjectUnderstandingAccountReader": "d18777c0-1514-4662-8490-608db7d334b6",
                              "Owner": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                              "PlayFabContributor": "0c8b84dc-067c-4039-9615-fa1a4b77c726",
                              "PlayFabReader": "a9a19cc5-31f4-447c-901f-56c0bb18fcaf",
                              "PolicyInsightsDataWriter": "66bb4e9e-b016-4a94-8249-4c0511c2be84",
                              "PrivateDNSZoneContributor": "b12aa53e-6015-4669-85d0-8515ebb3ae7f",
                              "ProjectBabylonDataCurator": "9ef4ef9c-a049-46b0-82ab-dd8ac094c889",
                              "ProjectBabylonDataReader": "c8d896ba-346d-4f50-bc1d-7d1c84130446",
                              "ProjectBabylonDataSourceAdministrator": "05b7651b-dc44-475e-b74d-df3db49fae0f",
                              "PurviewRole1": "8a3c2885-9b38-4fd2-9d99-91af537c1347",
                              "PurviewRole2": "200bba9e-f0c8-430f-892b-6f0794863803",
                              "PurviewRole3": "ff100721-1b9d-43d8-af52-42b69c1272db",
                              "QuotaRequestOperator": "0e5f05e5-9ab9-446b-b98d-1e2157c94125",
                              "Reader": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
                              "ReaderAndDataAccess": "c12c1c16-33a1-487b-954d-41c89c60f349",
                              "RedisCacheContributor": "e0f68234-74aa-48ed-b826-c38b57376e17",
                              "RemoteRenderingAdministrator": "3df8b902-2a6f-47c7-8cc5-360e9b272a7e",
                              "RemoteRenderingClient": "d39065c4-c120-43c9-ab0a-63eed9795f0a",
                              "ReservationPurchaser": "f7b75c60-3036-4b75-91c3-6b41c27c1689",
                              "ResourcePolicyContributor": "36243c78-bf99-498c-9df9-86d9f8d28608",
                              "RoleBasedAccessControlAdministrator": "f58310d9-a9f6-439a-9e8d-f62e7b41a168",
                              "SQLDBContributor": "9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
                              "SQLManagedInstanceContributor": "4939a1f6-9ae0-4e48-a1e0-f2cbe897382d",
                              "SQLSecurityManager": "056cd41c-7e88-42e1-933e-88ba6a50c9c3",
                              "SQLServerContributor": "6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437",
                              "ScheduledPatchingContributor": "cd08ab90-6b14-449c-ad9a-8f8e549482c6",
                              "SchedulerJobCollectionsContributor": "188a0f2f-5c9e-469b-ae67-2aa5ce574b94",
                              "SchemaRegistryContributor": "5dffeca3-4936-4216-b2bc-10343a5abb25",
                              "SchemaRegistryReader": "2c56ea50-c6b3-40a6-83c0-9d98858bc7d2",
                              "SearchIndexDataContributor": "8ebe5a00-799e-43f5-93ac-243d3dce84a7",
                              "SearchIndexDataReader": "1407120a-92aa-4202-b7e9-c0e197c71c8f",
                              "SearchServiceContributor": "7ca78c08-252a-4471-8644-bb5ff32d4ba0",
                              "SecurityAdmin": "fb1c8493-542b-48eb-b624-b4c8fea62acd",
                              "SecurityAssessmentContributor": "612c2aa1-cb24-443b-ac28-3ab7272de6f5",
                              "SecurityDetonationChamberPublisher": "352470b3-6a9c-4686-b503-35deb827e500",
                              "SecurityDetonationChamberReader": "28241645-39f8-410b-ad48-87863e2951d5",
                              "SecurityDetonationChamberSubmissionManager": "a37b566d-3efa-4beb-a2f2-698963fa42ce",
                              "SecurityDetonationChamberSubmitter": "0b555d9b-b4a7-4f43-b330-627f0e5be8f0",
                              "SecurityManager": "e3d13bf0-dd5a-482e-ba6b-9b8433878d10",
                              "SecurityReader": "39bc4728-0917-49c7-9d2c-d95423bc2eb4",
                              "ServicesHubOperator": "82200a5b-e217-47a5-b665-6d8765ee745b",
                              "SignalRAccessKeyReader": "04165923-9d83-45d5-8227-78b77b0a687e",
                              "SignalRAppServer": "420fcaa2-552c-430f-98ca-3264be4806c7",
                              "SignalRRESTAPIOwner": "fd53cd77-2268-407a-8f46-7e7863d0f521",
                              "SignalRRESTAPIReader": "ddde6b66-c0df-4114-a159-3618637b3035",
                              "SignalRServiceOwner": "7e4f1700-ea5a-4f59-8f37-079cfe29dce3",
                              "SignalRWebPubSubContributor": "8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761",
                              "SiteRecoveryContributor": "6670b86e-a3f7-4917-ac9b-5d6ab1be4567",
                              "SiteRecoveryOperator": "494ae006-db33-4328-bf46-533a6560a3ca",
                              "SiteRecoveryReader": "dbaa88c4-0c30-4179-9fb3-46319faa6149",
                              "SpatialAnchorsAccountContributor": "8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827",
                              "SpatialAnchorsAccountOwner": "70bbe301-9835-447d-afdd-19eb3167307c",
                              "SpatialAnchorsAccountReader": "5d51204f-eb77-4b1c-b86a-2ec626c49413",
                              "StorageAccountBackupContributor": "e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1",
                              "StorageAccountContributor": "17d1049b-9a84-46fb-8f53-869881c3d3ab",
                              "StorageAccountKeyOperatorServiceRole": "81a9662b-bebf-436f-a333-f67b29880f12",
                              "StorageBlobDataContributor": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",
                              "StorageBlobDataOwner": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
                              "StorageBlobDataReader": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1",
                              "StorageBlobDelegator": "db58b8e5-c6ad-4a2a-8342-4190687cbf4a",
                              "StorageFileDataSMBShareContributor": "0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb",
                              "StorageFileDataSMBShareElevatedContributor": "a7264617-510b-434b-a828-9731dc254ea7",
                              "StorageFileDataSMBShareReader": "aba4ae5f-2193-4029-9191-0cb91df5e314",
                              "StorageQueueDataContributor": "974c5e8b-45b9-4653-ba55-5f855dd0fb88",
                              "StorageQueueDataMessageProcessor": "8a0f0c08-91a1-4084-bc3d-661d67233fed",
                              "StorageQueueDataMessageSender": "c6a89b2d-59bc-44d0-9896-0f6e12d7b80a",
                              "StorageQueueDataReader": "19e7f393-937e-4f77-808e-94535e297925",
                              "StorageTableDataContributor": "0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3",
                              "StorageTableDataReader": "76199698-9eea-4c19-bc75-cec21354c6b6",
                              "StreamAnalyticsQueryTester": "1ec5b3c1-b17e-4e25-8312-2acb3c3c5abf",
                              "SupportRequestContributor": "cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e",
                              "TagContributor": "4a9ae827-6dc8-4573-8ac7-8239d42aa03f",
                              "TemplateSpecContributor": "1c9b6475-caf0-4164-b5a1-2142a7116f4b",
                              "TemplateSpecReader": "392ae280-861d-42bd-9ea5-08ee6d83b80e",
                              "TestBaseReader": "15e0f5a1-3450-4248-8e25-e2afe88a9e85",
                              "TrafficManagerContributor": "a4b10055-b0c7-44c2-b00f-c7b5b3550cf7",
                              "UserAccessAdministrator": "18d7d88d-d35e-4fb5-a5c3-7773c20a72d9",
                              "VMScannerOperator": "d24ecba3-c1f4-40fa-a7bb-4588a071e8fd",
                              "VideoIndexerRestrictedViewer": "a2c4a527-7dc0-4ee3-897b-403ade70fafb",
                              "VirtualMachineAdministratorLogin": "1c0163c0-47e6-4577-8991-ea5c82e286e4",
                              "VirtualMachineContributor": "9980e02c-c2be-4d73-94e8-173b1dc7cf3c",
                              "VirtualMachineLocalUserLogin": "602da2ba-a5c2-41da-b01d-5360126ab525",
                              "VirtualMachineUserLogin": "fb879df8-f326-4884-b1cf-06f3ad86be52",
                              "WebPlanContributor": "2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b",
                              "WebPubSubServiceOwner": "12cf5a90-567b-43ae-8102-96cf46c7d9b4",
                              "WebPubSubServiceReader": "bfb1c7d2-fb1a-466b-b2ba-aee63b92deaf",
                              "WebsiteContributor": "de139f84-1756-47ae-9be6-808fbbe84772",
                              "WindowsAdminCenterAdministratorLogin": "a6333a3e-0164-44c3-b281-7a577aff287f",
                              "WorkbookContributor": "e8ddcd69-c73f-4f9f-9844-4100522f16ad",
                              "WorkbookReader": "b279062a-9be3-42a0-92ae-8b3cf002ec4d",
                              "WorkloadBuilderMigrationAgentRole": "d17ce0a2-0697-43bc-aac5-9113337ab61c"
                            },
                            "builtinRoles": "[variables('$fxv#0')]"
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignmentSA",
                                "count": "[length(parameters('roles'))]"
                              },
                              "condition": "[equals(parameters('kind'), 'storage')]",
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                              "name": "[guid(resourceGroup().id, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), parameters('name'), parameters('roles')[copyIndex()])]",
                              "properties": {
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('builtinRoles')[replace(parameters('roles')[copyIndex()], ' ', '')])]",
                                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), '2022-01-31-preview').principalId]",
                                "principalType": "ServicePrincipal"
                              }
                            },
                            {
                              "copy": {
                                "name": "roleAssignmentACR",
                                "count": "[length(parameters('roles'))]"
                              },
                              "condition": "[equals(parameters('kind'), 'acr')]",
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                              "name": "[guid(resourceGroup().id, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), parameters('name'), parameters('roles')[copyIndex()])]",
                              "properties": {
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('builtinRoles')[replace(parameters('roles')[copyIndex()], ' ', '')])]",
                                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), '2022-01-31-preview').principalId]",
                                "principalType": "ServicePrincipal"
                              }
                            },
                            {
                              "copy": {
                                "name": "roleAssignmentBA",
                                "count": "[length(parameters('roles'))]"
                              },
                              "condition": "[equals(parameters('kind'), 'ba')]",
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Batch/batchAccounts/{0}', parameters('name'))]",
                              "name": "[guid(resourceGroup().id, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), parameters('name'), parameters('roles')[copyIndex()])]",
                              "properties": {
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('builtinRoles')[replace(parameters('roles')[copyIndex()], ' ', '')])]",
                                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), '2022-01-31-preview').principalId]",
                                "principalType": "ServicePrincipal"
                              }
                            },
                            {
                              "copy": {
                                "name": "roleAssignmentRG",
                                "count": "[length(parameters('roles'))]"
                              },
                              "condition": "[equals(parameters('kind'), 'rg')]",
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(resourceGroup().id, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), parameters('roles')[copyIndex()])]",
                              "properties": {
                                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('builtinRoles')[replace(parameters('roles')[copyIndex()], ' ', '')])]",
                                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('miConfig').group), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('miConfig').name), '2022-01-31-preview').principalId]",
                                "principalType": "ServicePrincipal"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('batch-{0}', variables('dplSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-{0}', variables('dplSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
              ],
              "metadata": {
                "description": "deploy hub role assignments"
              }
            }
          ],
          "outputs": {
            "summary": {
              "type": "object",
              "metadata": {
                "description": "deployment summary"
              },
              "value": {
                "batchAccount": {
                  "group": "[parameters('resourceGroupName')]",
                  "name": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('batch-{0}', variables('dplSuffix'))), '2022-09-01').outputs.batchAccountName.value]",
                  "endpoint": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('batch-{0}', variables('dplSuffix'))), '2022-09-01').outputs.batchAccountEndpoint.value]"
                },
                "mi": {
                  "group": "[parameters('resourceGroupName')]",
                  "name": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('batch-{0}', variables('dplSuffix'))), '2022-09-01').outputs.miConfig.value.name]"
                },
                "storageConfigs": "[reduce(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('storage-{0}', variables('dplSuffix'))), '2022-09-01').outputs.unlattedConfigs.value, createObject(), lambda('acc', 'x', union(lambdaVariables('acc'), lambdaVariables('x'))))]",
                "vnet": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('spoke-{0}', variables('dplSuffix'))), '2022-09-01').outputs.vnet.value]"
              }
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "summary": {
      "type": "object",
      "metadata": {
        "description": "deployment summary"
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('infrastructure-{0}', variables('dplSuffix'))), '2022-09-01').outputs.summary.value]"
    },
    "resourceGroups": {
      "type": "array",
      "metadata": {
        "description": "resource group names"
      },
      "value": [
        "[parameters('resourceGroupName')]"
      ]
    }
  }
}